---
title: "WFP Color Palette and Theme Develompent"
author: "William McFall - WFP South Sudan RAM Officer"
date: "`r format(Sys.time(), '%B %d, %Y')`"
output:
  html_document:
    toc: yes
    number_sections: yes
    toc_float:
      collapsed: no
      smooth_scroll: yes
    theme: lumen
    highlight: haddock
---

```{css, echo=FALSE}
  #TOC {
    max-width: fit-content;
    white-space: nowrap;
  }
  
  div:has(> #TOC) {
    display: flex;
    flex-direction: row-reverse;
}
```

```{r wfp_theme, echo=FALSE, message = FALSE, warning = FALSE}

rm(list = ls())

##########################################################
## Established local working directory
##########################################################

setwd('C:/Users/william.mcfall/OneDrive - World Food Programme/2. SSCO Files/5. Programme Files/14. FSNMS - Round 28/Data Analysis')

##########################################################
## Loads relevant packages
##########################################################

library(gtsummary)
library(readxl)
library(openxlsx)
library(dplyr)
library(tidyr)
library(mosaic)
library(tidyverse)
library(modelsummary)
library(kableExtra) 
library(foreign)
library(arsenal)
library(desctable)
library(survey)
library(srvyr) 
library(naniar)
library(rmarkdown)
library(haven)
library(labelled)
library(sjlabelled)
# library(xlsx)
library(rlang)
library(skimr)
library(ggrepel)
library(janitor)
library(skimr)
library(gt)
library(ggmap)
library(colorspace)
library(scales)
library(extrafont)
library(bookdown)
library(rmdformats)
library(palmerpenguins)

##########################################################
## Loads required font family
##########################################################

# font_import(paths = "C:/Users/william.mcfall/OneDrive - World Food Programme/Documents/R/R-4.1.2/library/rmarkdown/rmd/h/bootstrap/css/fonts")
loadfonts(device="win")

##########################################################
## Loads dataset
##########################################################

file_path <- "./Data Input/cleaned_raw_data.xlsx"
fsnms_data <- read_xlsx(file_path, sheet="data")


##########################################################
## Prepare dataset
##########################################################

fsnms_data %>% mutate(FCSStap = as.numeric(interview.section_i.f01_note.F01A),
                      FCSPulse = as.numeric(interview.section_i.f02_note.F02A),
                      FCSDairy = as.numeric(interview.section_i.f03_note.F03A),
                      FCSPr = as.numeric(interview.section_i.f04_note.F04A),
                      FCSVeg = as.numeric(interview.section_i.f05_note.F05A),
                      FCSFruit = as.numeric(interview.section_i.f06_note.F06A),
                      FCSFat = as.numeric(interview.section_i.f07_note.F07A),
                      FCSSugar = as.numeric(interview.section_i.f08_note.F08A),
                      FCSCond = as.numeric(interview.section_i.f09_note.F09A)) %>% 
                          mutate(FCSStap = ifelse(FCSStap >= 0 & FCSStap <= 7, FCSStap, NA),
                          FCSPulse = ifelse(FCSPulse >= 0 & FCSPulse <= 7, FCSPulse, NA),
                          FCSDairy = ifelse(FCSDairy >= 0 & FCSDairy <= 7, FCSDairy, NA),
                          FCSPr = ifelse(FCSPr >= 0 & FCSPr <= 7, FCSPr, NA),
                          FCSVeg = ifelse(FCSVeg >= 0 & FCSVeg <= 7, FCSVeg, NA),
                          FCSFruit = ifelse(FCSFruit >= 0 & FCSFruit <= 7, FCSFruit, NA),
                          FCSFat = ifelse(FCSFat >= 0 & FCSFat <= 7, FCSFat, NA),
                          FCSSugar = ifelse(FCSSugar >= 0 & FCSSugar <= 7, FCSSugar, NA),
                          FCSCond = ifelse(FCSCond >= 0 & FCSCond <= 7, FCSCond, NA)) -> fsnms_data

fsnms_data %>% mutate(FCS = FCSStap*2 + FCSPulse*3 + FCSDairy*4 + FCSPr*4 + FCSVeg*1 + FCSFruit*1 + FCSFat*0.5 + FCSSugar*0.5) -> fsnms_data

fsnms_data %>% mutate(FCS_Classification = case_when(FCS >= 0 & FCS <= 21 ~"Poor", FCS > 21 & FCS <= 35 ~ "Borderline", FCS > 35 ~ "Acceptable")) %>% mutate(FCS_Classification = ifelse(FCS == 0, NA, FCS_Classification)) -> fsnms_data


########################################################################
### Creates FCS-N Indicators
########################################################################

## Source Document:https://newgo.wfp.org/services/wfp-indicator-compendium-2022-2025

# creates fcs-n component indicators 
fsnms_data %>% mutate(FCSPrMeatF = as.numeric(interview.section_i.f041_note.F041A),
                      FCSPrMeatO = as.numeric(interview.section_i.f042_note.F042A),
                      FCSPrMeatFish = as.numeric(interview.section_i.f043_note.F043A),
                      FCSPrMeatEggs = as.numeric(interview.section_i.f044_note.F044A),
                      FCSVegOrg = as.numeric(interview.section_i.f051_note.F051A),
                      FCSVegGre = as.numeric(interview.section_i.f052_note.F052A),
                      FCSFruitOrg = as.numeric(interview.section_i.f061_note.F061A)) -> fsnms_data

# creates list of vitamin a rich foods including dairy, organ meat, eggs, orange vegetables, green vegetables, and orange fruits
FCSN_vitamina_list <- c("FCSDairy", "FCSPrMeatO", "FCSPrMeatEggs", "FCSVegOrg", "FCSVegGre", "FCSFruitOrg")

# creates list of protein rich foods pulses and nuts, dairy, flesh meat, organ meat, fish, and eggs
FCSN_protein_list <- c("FCSPulse", "FCSDairy", "FCSPrMeatF", "FCSPrMeatO", "FCSPrMeatFish", "FCSPrMeatEggs")

# creates list of hem iron rich foods includes flesh meat, organ meat, and fish
FCSN_hemiron_list <- c("FCSPrMeatF", "FCSPrMeatO", "FCSPrMeatFish")

# creates fcs-n score indicator
fsnms_data %>% mutate(FCSN_VITAMINA = rowSums(.[FCSN_vitamina_list], na.rm=TRUE),
                      FCSN_PROTEIN = rowSums(.[FCSN_protein_list], na.rm=TRUE),
                      FCSN_HEMIRON = rowSums(.[FCSN_hemiron_list], na.rm=TRUE)) -> fsnms_data

# creates fcs-n classification indicator
fsnms_data %>% mutate(FCSN_VITAMINA_CLASSIFICATION = case_when(FCSN_VITAMINA == 0 ~ "0 Days", FCSN_VITAMINA >= 1 & FCSN_VITAMINA <= 6 ~ "1-6 Days", FCSN_VITAMINA >= 7 & FCSN_VITAMINA <= 42 ~ "7 Days"),
                      FCSN_PROTEIN_CLASSIFICATION = case_when(FCSN_PROTEIN == 0 ~ "0 Days", FCSN_PROTEIN >= 1 & FCSN_PROTEIN <= 6 ~ "1-6 Days", FCSN_PROTEIN >= 7 & FCSN_PROTEIN <= 42 ~ "7 Days"),
                      FCSN_HEMIRON_CLASSIFICATION = case_when(FCSN_HEMIRON == 0 ~ "0 Days", FCSN_HEMIRON >= 1 & FCSN_HEMIRON <= 6 ~ "1-6 Days", FCSN_HEMIRON >= 7 & FCSN_HEMIRON <= 42 ~ "7 Days")) -> fsnms_data



########################################################################
### Creates rCSI Indicators
########################################################################

## Source Document:https://newgo.wfp.org/services/wfp-indicator-compendium-2022-2025

# creates rCSI component indicators 
fsnms_data %>% mutate(rCSILessQlty = as.numeric(fsnms_data$interview.section_n.section_n_rcsi.N01),
                      rCSIBorrow = as.numeric(fsnms_data$interview.section_n.section_n_rcsi.N05),
                      rCSIMealNb = as.numeric(fsnms_data$interview.section_n.section_n_rcsi.N04),
                      rCSIMealSize = as.numeric(fsnms_data$interview.section_n.section_n_rcsi.N02),
                      rCSIMealAdult = as.numeric(fsnms_data$interview.section_n.section_n_rcsi.N03)) -> fsnms_data

# checks rCSI component indicator validity
fsnms_data %>% mutate(rCSILessQlty  = ifelse(rCSILessQlty  >= 0 & rCSILessQlty <= 7, rCSILessQlty, NA),
                      rCSIBorrow = ifelse(rCSIBorrow >= 0 & rCSIBorrow <= 7, rCSIBorrow, NA),
                      rCSIMealNb = ifelse(rCSIMealNb >= 0 & rCSIMealNb <= 7, rCSIMealNb, NA),
                      rCSIMealSize = ifelse(rCSIMealSize >= 0 & rCSIMealSize <= 7, rCSIMealSize, NA),
                      rCSIMealAdult = ifelse(rCSIMealAdult >= 0 & rCSIMealAdult <= 7, rCSIMealAdult, NA)) -> fsnms_data


# creates rCSI score indicator
fsnms_data %>% mutate(rCSI = rCSILessQlty*1 + rCSIBorrow*2 + rCSIMealNb*1 + rCSIMealSize*1 + rCSIMealAdult*3) -> fsnms_data


# creates rCSI score classification indicator
fsnms_data %>% mutate(rCSI_Classification = case_when(rCSI >= 0 & rCSI <=3 ~ "rCSI - 0 to 3", rCSI >= 4 & rCSI <=18 ~ "rCSI - 4 to 18", rCSI >= 19 ~ "rCSI - 19+")) -> fsnms_data

# creates rCSI score classification indicator - modified four point for IPC
fsnms_data %>% mutate(rCSI_Classification_Modified_4pt = case_when(rCSI >= 0 & rCSI <=3 ~ "rCSI - 0 to 3", rCSI >= 4 & rCSI <=18 ~ "rCSI - 4 to 18", rCSI >= 19  & rCSI <= 43 ~ "rCSI - 19 to 43", rCSI > 43 ~ "rCSI - 43+")) -> fsnms_data


# creates binary rCSI score indicators
fsnms_data %>% mutate(rCSILessQlty_yn  = ifelse(rCSILessQlty  > 0 & rCSILessQlty <= 7, 1, 0),
                      rCSIBorrow_yn = ifelse(rCSIBorrow > 0 & rCSIBorrow <= 7, 1, 0),
                      rCSIMealNb_yn = ifelse(rCSIMealNb > 0 & rCSIMealNb <= 7, 1, 0),
                      rCSIMealSize_yn = ifelse(rCSIMealSize > 0 & rCSIMealSize <= 7, 1, 0),
                      rCSIMealAdult_yn = ifelse(rCSIMealAdult > 0 & rCSIMealAdult<= 7, 1, 0)) -> fsnms_data

# table(fsnms_data$rCSILessQlty, useNA = "ifany")
# table(fsnms_data$rCSIBorrow, useNA = "ifany")
# table(fsnms_data$rCSIMealNb, useNA = "ifany")
# table(fsnms_data$rCSIMealSize, useNA = "ifany")
# table(fsnms_data$rCSIMealAdult, useNA = "ifany")
# table(fsnms_data$rCSILessQlty_yn, useNA = "ifany")
# table(fsnms_data$rCSIBorrow_yn, useNA = "ifany")
# table(fsnms_data$rCSIMealNb_yn, useNA = "ifany")
# table(fsnms_data$rCSIMealSize_yn, useNA = "ifany")
# table(fsnms_data$rCSIMealAdult_yn, useNA = "ifany")
# table(fsnms_data$rCSI, useNA = "ifany")
# table(fsnms_data$rCSI_Classification, useNA = "ifany")

########################################################################
### Creates Expenditure Indicators
########################################################################

############################################
### Creates Non-Food Expenditure Indicators
############################################

## creates non-food consumable expenditure component indicators - cash 
fsnms_data %>% mutate(HHExpNFAlcTobac_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFAlcTobac_MN_6M),
                      HHExpNFHyg_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFHyg_MN_6M),
                      HHExpNFTransp_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFTransp_MN_6M),
                      HHExpNFEnerg_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFEnerg_MN_6M),
                      HHExpNFPhone_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFPhone_MN_6M), 
                      HHExpNFMedServ_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFMedServ_MN_6M),
                      HHExpNFMedGood_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFMedGood_MN_6M),
                      HHExpNFCloth_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFCloth_MN_6M),
                      HHExpNFEduFee_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFEduFee_MN_6M),
                      HHExpNFEduGood_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFEduGood_MN_6M),
                      HHExpNFCstrc_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFCstrc_MN_6M),
                      HHExpNFSoc_MN_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFSoc_MN_6M)) -> fsnms_data

## creates non-food consumable expenditure component indicators - credit
fsnms_data %>% mutate(HHExpNFAlcTobac_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFAlcTobac_CRD_6M),
                      HHExpNFHyg_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFHyg_CRD_6M),
                      HHExpNFTransp_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFTransp_CRD_6M),
                      HHExpNFEnerg_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFEnerg_CRD_6M),
                      HHExpNFPhone_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFPhone_CRD_6M),
                      HHExpNFMedServ_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFMedServ_CRD_6M),
                      HHExpNFMedGood_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFMedGood_CRD_6M),
                      HHExpNFCloth_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFCloth_CRD_6M),
                      HHExpNFEduFee_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFEduFee_CRD_6M),
                      HHExpNFEduGood_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFEduGood_CRD_6M),
                      HHExpNFCstrc_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFCstrc_CRD_6M),
                      HHExpNFSoc_CRD_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFSoc_CRD_6M)) -> fsnms_data 

## creates non-food consumable expenditure component indicators - gifts and aid
fsnms_data %>% mutate(HHExpNFAlcTobac_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFAlcTobac_GiftAid_6M),
                      HHExpNFHyg_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFHyg_GiftAid_6M),
                      HHExpNFEnerg_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFEnerg_GiftAid_6M),
                      HHExpNFPhone_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFPhone_GiftAid_6M),
                      HHExpNFMedServ_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFMedServ_GiftAid_6M),
                      HHExpNFMedGood_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFMedGood_GiftAid_6M),
                      HHExpNFCloth_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFCloth_GiftAid_6M),
                      HHExpNFEduFee_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFEduFee_GiftAid_6M),
                      HHExpNFEduGood_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFEduGood_GiftAid_6M),
                      HHExpNFCstrc_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFCstrc_GiftAid_6M),
                      HHExpNFSoc_GiftAid_6M = as.numeric(interview.section_k.NonFoodConsumption_submodule.HHExpNFSoc_GiftAid_6M)) -> fsnms_data

## creates non-food intermediate expenditure component indicators
fsnms_data %>% mutate(HHExpNFAgriLandRent_Est_6M = as.numeric(interview.section_k.NonFoodIntermediate_submodule.HHExpNFAgriLandRent_Est_6M),
                      HHExpNFAgriWorkf_Est_6M = as.numeric(interview.section_k.NonFoodIntermediate_submodule.HHExpNFAgriWorkf_Est_6M) ,
                      HHExpNFFarmInp_Est_6M = as.numeric(interview.section_k.NonFoodIntermediate_submodule.HHExpNFFarmInp_Est_6M),
                      HHExpNFLvstInp_Est_6M = as.numeric(interview.section_k.NonFoodIntermediate_submodule.HHExpNFLvstInp_Est_6M)) -> fsnms_data

## creates non-food intermediate expenditure component indicators
fsnms_data %>% mutate(HHExpNFSav_Est_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFSav_Est_6M),
                      HHExpNFDebt_Est_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFDebt_Est_6M),
                      HHExpNFRemit_Est_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFRemit_Est_6M),
                      HHExpNFTax_Est_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFTax_Est_6M),
                      HHExpNFTax_MN_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFTax_MN_6M),
                      HHExpNFTax_CRD_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFTax_CRD_6M),
                      HHExpNFDurab_CRD_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFDurab_CRD_6M),
                      HHExpNFDurab_MN_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFDurab_MN_6M),
                      HHExpNFDurab_GiftAid_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFDurab_GiftAid_6M),
                      HHExpNFVehicle_MN_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFVehicle_MN_6M),
                      HHExpNFVehicle_CRD_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFVehicle_CRD_6M),
                      HHExpNFVehicle_GiftAid_6M = as.numeric(interview.section_k.NonFoodWealth_submodule.HHExpNFVehicle_GiftAid_6M)) -> fsnms_data 


## creates list of non-food consumable expenditure component indicators - cash         
HHExpNFTotal_MN_6M_list <- c("HHExpNFAlcTobac_MN_6M","HHExpNFHyg_MN_6M", "HHExpNFTransp_MN_6M", "HHExpNFEnerg_MN_6M", "HHExpNFPhone_MN_6M", "HHExpNFMedServ_MN_6M", "HHExpNFMedGood_MN_6M", "HHExpNFCloth_MN_6M","HHExpNFEduFee_MN_6M", "HHExpNFEduGood_MN_6M", "HHExpNFCstrc_MN_6M", "HHExpNFSoc_MN_6M")

## creates list of non-food consumable expenditure component indicators - credit
HHExpNFTotal_CRD_6M_list <- c("HHExpNFAlcTobac_CRD_6M","HHExpNFHyg_CRD_6M", "HHExpNFTransp_CRD_6M", "HHExpNFEnerg_CRD_6M", "HHExpNFPhone_CRD_6M", "HHExpNFMedServ_CRD_6M", "HHExpNFMedGood_CRD_6M", "HHExpNFCloth_CRD_6M","HHExpNFEduFee_CRD_6M", "HHExpNFEduGood_CRD_6M", "HHExpNFCstrc_CRD_6M", "HHExpNFSoc_CRD_6M")

## creates list of non-food consumable expenditure component indicators - gift and aid
HHExpNFTotal_GiftAid_6M_list <- c("HHExpNFAlcTobac_GiftAid_6M","HHExpNFHyg_GiftAid_6M", "HHExpNFEnerg_GiftAid_6M", "HHExpNFPhone_GiftAid_6M", "HHExpNFMedServ_GiftAid_6M", "HHExpNFMedGood_GiftAid_6M", "HHExpNFCloth_GiftAid_6M","HHExpNFEduFee_GiftAid_6M", "HHExpNFEduGood_GiftAid_6M", "HHExpNFCstrc_GiftAid_6M", "HHExpNFSoc_GiftAid_6M")

## creates list of non-food intermediate expenditure component indicators
HHExpNFIntermediate_6M_list <- c("HHExpNFAgriLandRent_Est_6M","HHExpNFAgriWorkf_Est_6M", "HHExpNFFarmInp_Est_6M", "HHExpNFLvstInp_Est_6M")

## creates list of non-food wealth expenditure component indicators
HHExpNFWealth_6M_list <- c("HHExpNFSav_Est_6M","HHExpNFDebt_Est_6M", "HHExpNFRemit_Est_6M", "HHExpNFTax_Est_6M", "HHExpNFTax_MN_6M", "HHExpNFTax_CRD_6M", "HHExpNFDurab_CRD_6M", "HHExpNFDurab_MN_6M", "HHExpNFDurab_GiftAid_6M", "HHExpNFVehicle_MN_6M", "HHExpNFVehicle_CRD_6M", "HHExpNFVehicle_GiftAid_6M")


## creates variable for non-food expenditure indicators - 6 months
fsnms_data %>% mutate(HHExpNFTotal_MN_6M = rowSums(.[HHExpNFTotal_MN_6M_list], na.rm=TRUE),
                      HHExpNFTotal_CRD_6M = rowSums(.[HHExpNFTotal_CRD_6M_list], na.rm=TRUE),
                      HHExpNFTotal_GiftAid_6M = rowSums(.[HHExpNFTotal_GiftAid_6M_list], na.rm=TRUE),
                      HHExpNFIntermediate_6M = rowSums(.[HHExpNFIntermediate_6M_list], na.rm=TRUE),
                      HHExpNFWealth_6M = rowSums(.[HHExpNFWealth_6M_list], na.rm=TRUE)) -> fsnms_data

## creates variable for non-food expenditure indicators - 1 month
fsnms_data %>% mutate(HHExpNFTotal_MN_1M = HHExpNFTotal_MN_6M/6,
                      HHExpNFTotal_CRD_1M = HHExpNFTotal_CRD_6M/6,
                      HHExpNFTotal_GiftAid_1M = HHExpNFTotal_GiftAid_6M/6,
                      HHExpNFIntermediate_1M = HHExpNFIntermediate_6M/6,
                      HHExpNFWealth_1M = HHExpNFWealth_6M/6) -> fsnms_data
                      
## creates variable for per non-food expenditure indicators - 1 month per capita
fsnms_data %>% mutate(PCExpNFTotal_MN_1M = HHExpNFTotal_MN_1M/as.numeric(fsnms_data$interview.b01_note.Cal_Total_family_members),
                      PCExpNFTotal_CRD_1M = HHExpNFTotal_CRD_1M/as.numeric(fsnms_data$interview.b01_note.Cal_Total_family_members),
                      PCExpNFTotal_GiftAid_1M = HHExpNFTotal_GiftAid_1M/as.numeric(fsnms_data$interview.b01_note.Cal_Total_family_members),
                      PCExpNFIntermediate_1M = HHExpNFIntermediate_1M/as.numeric(fsnms_data$interview.b01_note.Cal_Total_family_members),
                      PCExpNFWealth_1M = HHExpNFWealth_1M/as.numeric(fsnms_data$interview.b01_note.Cal_Total_family_members)) -> fsnms_data

# creates total non-food expenditure indicator - 1 month
fsnms_data %>% mutate(HHExpNFTotal_1M = HHExpNFTotal_MN_1M + HHExpNFTotal_CRD_1M + HHExpNFTotal_GiftAid_1M + HHExpNFIntermediate_1M + HHExpNFWealth_1M) -> fsnms_data

# creates total non-food expenditure indicator - 1 month per capita
fsnms_data %>% mutate(PCExpNFTotal_1M = as.numeric(HHExpNFTotal_1M) / as.numeric(interview.b01_note.Cal_Total_family_members)) -> fsnms_data


############################################
### Creates Food Expenditure Indicators
############################################

# creates food expenditure component indicators 
fsnms_data %>% mutate(HHExpFCer_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFCer_MN_1M),
                      HHExpFTub_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFTub_MN_1M),
                      HHExpFPuls_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFPuls_MN_1M),
                      HHExpFVeg_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFVeg_MN_1M), 
                      HHExpFFrt_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFFrt_MN_1M),
                      HHExpFAnimMeat_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimMeat_MN_1M), 
                      HHExpFAnimFish_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimFish_MN_1M),
                      HHExpFFats_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFFats_MN_1M), 
                      HHExpFDairy_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFDairy_MN_1M), 
                      HHExpFAnimEgg_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimEgg_MN_1M),
                      HHExpFSgr_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFSgr_MN_1M),
                      HHExpFCond_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFCond_MN_1M), 
                      HHExpFBeverage_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFBeverage_MN_1M), 
                      HHExpFOut_MN_1M = as.numeric(interview.section_k.Food_submodule.HHExpFOut_MN_1M),
                      HHExpFCer_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFCer_CRD_1M), 
                      HHExpFTub_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFTub_CRD_1M), 
                      HHExpFPuls_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFPuls_CRD_1M), 
                      HHExpFVeg_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFVeg_CRD_1M), 
                      HHExpFFrt_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFFrt_CRD_1M), 
                      HHExpFAnimMeat_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimMeat_CRD_1M), 
                      HHExpFAnimFish_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimFish_CRD_1M), 
                      HHExpFFats_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFFats_CRD_1M), 
                      HHExpFDairy_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFDairy_CRD_1M), 
                      HHExpFAnimEgg_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimEgg_CRD_1M), 
                      HHExpFSgr_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFSgr_CRD_1M), 
                      HHExpFCond_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFCond_CRD_1M), 
                      HHExpFBeverage_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFBeverage_CRD_1M),
                      HHExpFOut_CRD_1M = as.numeric(interview.section_k.Food_submodule.HHExpFOut_CRD_1M),
                      HHExpFCer_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFCer_GiftAid_1M), 
                      HHExpFTub_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFTub_GiftAid_1M), 
                      HHExpFPuls_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFPuls_GiftAid_1M), 
                      HHExpFVeg_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFVeg_GiftAid_1M), 
                      HHExpFFrt_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFFrt_GiftAid_1M),  
                      HHExpFAnimMeat_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimMeat_GiftAid_1M), 
                      HHExpFAnimFish_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimFish_GiftAid_1M), 
                      HHExpFFats_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFFats_GiftAid_1M), 
                      HHExpFDairy_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFDairy_GiftAid_1M), 
                      HHExpFAnimEgg_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimEgg_GiftAid_1M), 
                      HHExpFSgr_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFSgr_GiftAid_1M), 
                      HHExpFCond_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFCond_GiftAid_1M), 
                      HHExpFBeverage_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFBeverage_GiftAid_1M), 
                      HHExpFOut_GiftAid_1M = as.numeric(interview.section_k.Food_submodule.HHExpFOut_GiftAid_1M), 
                      HHExpFCer_Own_1M =  as.numeric(interview.section_k.Food_submodule.HHExpFCer_Own_1M), 
                      HHExpFTub_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFTub_Own_1M), 
                      HHExpFPuls_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFPuls_Own_1M), 
                      HHExpFVeg_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFVeg_Own_1M), 
                      HHExpFFrt_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFFrt_Own_1M), 
                      HHExpFAnimMeat_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimMeat_Own_1M), 
                      HHExpFAnimFish_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimFish_Own_1M), 
                      HHExpFFats_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFFats_Own_1M), 
                      HHExpFDairy_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFDairy_Own_1M), 
                      HHExpFAnimEgg_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFAnimEgg_Own_1M), 
                      HHExpFSgr_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFSgr_Own_1M), 
                      HHExpFCond_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFCond_Own_1M), 
                      HHExpFBeverage_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFBeverage_Own_1M), 
                      HHExpFOut_Own_1M = as.numeric(interview.section_k.Food_submodule.HHExpFOut_Own_1M)) -> fsnms_data
                      
# creates list of food expenditure variables for purchases with cash              
HHExpFood_MN_1M_list <- c("HHExpFCer_MN_1M","HHExpFTub_MN_1M", "HHExpFPuls_MN_1M", "HHExpFVeg_MN_1M", "HHExpFFrt_MN_1M", "HHExpFAnimMeat_MN_1M", "HHExpFAnimFish_MN_1M", "HHExpFFats_MN_1M", "HHExpFDairy_MN_1M", "HHExpFAnimEgg_MN_1M", "HHExpFSgr_MN_1M", "HHExpFCond_MN_1M", "HHExpFBeverage_MN_1M", "HHExpFOut_MN_1M")

# creates list of food expenditure variables for purchases with credit  
HHExpFood_CRD_1M_list <- c("HHExpFCer_CRD_1M","HHExpFTub_CRD_1M", "HHExpFPuls_CRD_1M", "HHExpFVeg_CRD_1M", "HHExpFFrt_CRD_1M", "HHExpFAnimMeat_CRD_1M", "HHExpFAnimFish_CRD_1M", "HHExpFFats_CRD_1M", "HHExpFDairy_CRD_1M", "HHExpFAnimEgg_CRD_1M", "HHExpFSgr_CRD_1M", "HHExpFCond_CRD_1M", "HHExpFBeverage_CRD_1M", "HHExpFOut_CRD_1M")

# creates list of food expenditure variables for valued gifts  
HHExpFood_GiftAid_1M_list <- c("HHExpFCer_GiftAid_1M","HHExpFTub_GiftAid_1M", "HHExpFPuls_GiftAid_1M", "HHExpFVeg_GiftAid_1M", "HHExpFFrt_GiftAid_1M", "HHExpFAnimMeat_GiftAid_1M", "HHExpFAnimFish_GiftAid_1M", "HHExpFFats_GiftAid_1M", "HHExpFDairy_GiftAid_1M", "HHExpFAnimEgg_GiftAid_1M", "HHExpFSgr_GiftAid_1M", "HHExpFCond_GiftAid_1M", "HHExpFBeverage_GiftAid_1M", "HHExpFOut_GiftAid_1M")

# creates list of food expenditure variables for valued barter trades
HHExpFood_Own_1M_list <- c("HHExpFCer_Own_1M","HHExpFTub_Own_1M", "HHExpFPuls_Own_1M", "HHExpFVeg_Own_1M", "HHExpFFrt_Own_1M", "HHExpFAnimMeat_Own_1M", "HHExpFAnimFish_Own_1M", "HHExpFFats_Own_1M", "HHExpFDairy_Own_1M", "HHExpFAnimEgg_Own_1M", "HHExpFSgr_Own_1M", "HHExpFCond_Own_1M", "HHExpFBeverage_Own_1M", "HHExpFOut_Own_1M")


# creates food expenditure indicator - 1 month
fsnms_data %>% mutate(HHExpFood_MN_1M = rowSums(.[HHExpFood_MN_1M_list], na.rm=TRUE),
                      HHExpFood_CRD_1M = rowSums(.[HHExpFood_CRD_1M_list], na.rm=TRUE),
                      HHExpFood_GiftAid_1M = rowSums(.[HHExpFood_GiftAid_1M_list], na.rm=TRUE),
                      HHExpFood_Own_1M = rowSums(.[HHExpFood_Own_1M_list], na.rm=TRUE)) %>% mutate(HHExpFood_1M = HHExpFood_MN_1M + HHExpFood_CRD_1M + HHExpFood_GiftAid_1M + HHExpFood_Own_1M) -> fsnms_data

# creates food expenditure indicator - 1 month per capita
fsnms_data %>% mutate(PCExpFood_1M = as.numeric(HHExpFood_1M) / as.numeric(interview.b01_note.Cal_Total_family_members)) -> fsnms_data

############################################
### Creates Total Expenditure Indicators
############################################

## creates total expenditure variable - 1 month
fsnms_data$HHExpTotal_1M <- fsnms_data$HHExpFood_1M + fsnms_data$HHExpNFTotal_1M

## creates total expenditure variable - 1 month per capita
fsnms_data$PCExpTotal_1M <- as.numeric(fsnms_data$HHExpTotal_1M) / as.numeric(fsnms_data$interview.b01_note.Cal_Total_family_members)


########################################################################
### Creates FES Indicators
########################################################################

# creates food expenditure indicator
fsnms_data %>% mutate(HHExpFood_MN_1M = rowSums(.[HHExpFood_MN_1M_list], na.rm=TRUE),
                      HHExpFood_CRD_1M = rowSums(.[HHExpFood_CRD_1M_list], na.rm=TRUE),
                      HHExpFood_GiftAid_1M = rowSums(.[HHExpFood_GiftAid_1M_list], na.rm=TRUE),
                      HHExpFood_Own_1M = rowSums(.[HHExpFood_Own_1M_list], na.rm=TRUE)) %>% mutate(HHExpFood_1M = HHExpFood_MN_1M + HHExpFood_CRD_1M + HHExpFood_GiftAid_1M + HHExpFood_Own_1M) %>% mutate(PCExpFood_1M = as.numeric(HHExpFood_1M) / as.numeric(interview.b01_note.Cal_Total_family_members)) -> fsnms_data


# creates food expenditure share indicator
fsnms_data$FES <- as.numeric(fsnms_data$HHExpFood_1M)/as.numeric(fsnms_data$HHExpTotal_1M)
fsnms_data$FES[fsnms_data$HHExpTotal_1M == 0] <- 1

# creates food expenditure share classification indicator
fsnms_data %>% mutate(FES_Classification = case_when(FES >= 0.00 & FES < .50 ~ "<50%", FES >= 0.50 & FES < .65 ~ "50%-65%", FES >= 0.65 & FES < .75 ~ "65%-75%", FES >= 0.75 & FES <= 1.0 ~ ">75%")) -> fsnms_data

# table(fsnms_data$FES, useNA = "ifany")
# table(fsnms_data$FES_Classification, useNA = "ifany")

########################################################################
### Creates HDDS Indicators
########################################################################

## Household Dietary Diversity Score 
## Source Document:https://www.fao.org/nutrition/assessment/tools/household-dietary-diversity/en/#:~:text=Household%20dietary%20diversity%20Score%20(HDDS)%20is%20a%20qualitative%20measure%20of,dietary%20di## versity%20at%20individual%20level
## A. Cereals
## B. Root and Tubers
## C. Vegetables
## D. Fruits
## E. Meat, Poultry, and Offals
## F. Eggs
## G. Fish and Seafood
## H. Pulses, Legumes, and Nuts
## I. Milk and Milk Products
## J. Oils and Fats
## K. Sugar and Honey
## L. Miscellaneous

## creates hdds cereals variable
fsnms_data %>% mutate(HDDS_Cereals = case_when(interview.section_i.f011_note.F011B == "Yes" ~ 1, as.numeric(interview.section_i.f011_note.F011A) == 7 ~ 1, 
as.numeric(interview.section_i.f011_note.F011A) == 0 ~ 0, interview.section_i.f011_note.F011B == "No" ~ 0, as.numeric(interview.section_i.f01_note.F01A) == 0 ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds roots variable
fsnms_data %>% mutate(HDDS_Roots = case_when(interview.section_i.f012_note.F012B == "Yes" ~ 1, as.numeric(interview.section_i.f012_note.F012A) == 7 ~ 1, as.numeric(interview.section_i.f012_note.F012A) == 0 ~ 0, interview.section_i.f012_note.F012B == "No" ~ 0, as.numeric(interview.section_i.f01_note.F01A) == 0 ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds vegetables variable
fsnms_data %>% mutate(HDDS_Vegetables = case_when(interview.section_i.f05_note.F05B == "Yes" ~ 1, as.numeric(interview.section_i.f05_note.F05A) == 7 ~ 1, as.numeric(interview.section_i.f05_note.F05A) == 0 ~ 0, interview.section_i.f05_note.F05B == "No" ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds fruits variable
fsnms_data %>% mutate(HDDS_Fruits = case_when(interview.section_i.f06_note.F06B == "Yes" ~ 1, as.numeric(interview.section_i.f06_note.F06A) == 7 ~ 1, as.numeric(interview.section_i.f06_note.F06A) == 0 ~ 0, interview.section_i.f06_note.F06B == "No" ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds meats variable
fsnms_data %>% mutate(HDDS_Meats = case_when(interview.section_i.f041_note.F041B == "Yes" | interview.section_i.f042_note.F042B == "Yes" ~ 1, interview.section_i.f041_note.F041B == "No" & interview.section_i.f042_note.F042B == "No" ~ 0, as.numeric(interview.section_i.f041_note.F041A) == 7 ~ 1, as.numeric(interview.section_i.f042_note.F042A) == 7 ~ 1, as.numeric(interview.section_i.f041_note.F041A) == 0 & as.numeric(interview.section_i.f042_note.F042A) == 0 ~ 0, as.numeric(interview.section_i.f04_note.F04A) == 0 ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds eggs variable
fsnms_data %>% mutate(HDDS_Eggs = case_when(interview.section_i.f044_note.F044B == "Yes" ~ 1, interview.section_i.f044_note.F044B == "No" ~ 0,  as.numeric(interview.section_i.f044_note.F044A) == 7 ~ 1, as.numeric(interview.section_i.f044_note.F044A) == 0 ~ 0, as.numeric(interview.section_i.f04_note.F04A) == 0 ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds fish variable
fsnms_data %>% mutate(HDDS_Fish = case_when(interview.section_i.f043_note.F043B == "Yes" ~ 1, interview.section_i.f043_note.F043B == "No" ~ 0, as.numeric(interview.section_i.f043_note.F043A) == 7 ~ 1, as.numeric(interview.section_i.f043_note.F043A) == 0 ~ 0, as.numeric(interview.section_i.f04_note.F04A) == 0 ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds pulses variable
fsnms_data %>% mutate(HDDS_Pulses = case_when(interview.section_i.f02_note.F02B == "Yes" ~ 1, interview.section_i.f02_note.F02B == "No" ~ 0, as.numeric(interview.section_i.f02_note.F02A) == 7 ~ 1, as.numeric(interview.section_i.f02_note.F02A) == 0 ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds milk variable
fsnms_data %>% mutate(HDDS_Milk = case_when(interview.section_i.f03_note.F03B == "Yes" ~ 1, interview.section_i.f03_note.F03B == "No" ~ 0, as.numeric(interview.section_i.f03_note.F03A) == 7 ~ 1, as.numeric(interview.section_i.f03_note.F03A) == 0 ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds oils variable
fsnms_data %>% mutate(HDDS_Oils = case_when(interview.section_i.f07_note.F07B == "Yes" ~ 1, interview.section_i.f07_note.F07B == "No" ~ 0, as.numeric(interview.section_i.f07_note.F07A) == 7 ~ 1, as.numeric(interview.section_i.f07_note.F07A) == 0 ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds sugar variable
fsnms_data %>% mutate(HDDS_Sugar = case_when(interview.section_i.f08_note.F08B == "Yes" ~ 1, interview.section_i.f08_note.F08B == "No" ~ 0, as.numeric(interview.section_i.f08_note.F08A) == 7 ~ 1, as.numeric(interview.section_i.f08_note.F08A) == 0 ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hdds condiments variable
fsnms_data %>% mutate(HDDS_Condiments = case_when(interview.section_i.f09_note.F09B == "Yes" ~ 1, interview.section_i.f09_note.F09B == "No" ~ 0,
as.numeric(interview.section_i.f09_note.F09A) == 7 ~ 1, as.numeric(interview.section_i.f09_note.F09A) == 0 ~ 0, TRUE ~ 0)) -> fsnms_data

## creates hDDS variable
fsnms_data$HDDS <- fsnms_data$HDDS_Cereals + fsnms_data$HDDS_Roots + fsnms_data$HDDS_Vegetables + fsnms_data$HDDS_Fruits + fsnms_data$HDDS_Meats + fsnms_data$HDDS_Eggs + fsnms_data$HDDS_Fish + fsnms_data$HDDS_Pulses + fsnms_data$HDDS_Milk + fsnms_data$HDDS_Oils + fsnms_data$HDDS_Sugar + fsnms_data$HDDS_Condiments

## creates hdds classification variable
fsnms_data %>% mutate(HDDS_Classification = case_when(as.numeric(HDDS) >= 5 & as.numeric(HDDS) <= 12 ~ "5-12 Food Groups", as.numeric(HDDS) >= 3 & as.numeric(HDDS) <= 4 ~ "3-4 Food Groups", as.numeric(HDDS) >= 0 & as.numeric(HDDS) <= 2 ~ "0-2 Food Groups")) -> fsnms_data

# table(fsnms_data$HDDS_Cereals, useNA = "ifany")
# table(fsnms_data$HDDS_Roots, useNA = "ifany")
# table(fsnms_data$HDDS_Vegetables, useNA = "ifany")
# table(fsnms_data$HDDS_Fruits, useNA = "ifany")
# table(fsnms_data$HDDS_Meats, useNA = "ifany")
# table(fsnms_data$HDDS_Eggs, useNA = "ifany")
# table(fsnms_data$HDDS_Fish, useNA = "ifany")
# table(fsnms_data$HDDS_Pulses, useNA = "ifany")
# table(fsnms_data$HDDS_Milk, useNA = "ifany")
# table(fsnms_data$HDDS_Oils, useNA = "ifany")
# table(fsnms_data$HDDS_Sugar, useNA = "ifany")
# table(fsnms_data$HDDS_Condiments, useNA = "ifany")
# table(fsnms_data$HDDS, useNA = "ifany")
# table(fsnms_data$HDDS_Classification, useNA = "ifany")


########################################################################
### Creates LCSI Indicators
########################################################################

## Source Document
## https://newgo.wfp.org/services/wfp-indicator-compendium-2022-2025]

## creates lcsi stress variable
fsnms_data %>% mutate(LCSI_Stress = case_when(interview.section_n.section_n_lcsi.N08 == "Yes" | interview.section_n.section_n_lcsi.N08 == "No, because I have already engaged in this activity in the last 12 months and cannot continue doing it" ~ 1, interview.section_n.section_n_lcsi.N09 == "Yes" | interview.section_n.section_n_lcsi.N09 == "No, because I have already sold those assets in the last 12 months and cannot continue doing it" ~ 1, interview.section_n.section_n_lcsi.N10 == "Yes" | interview.section_n.section_n_lcsi.N10 == "No, because I already did this in the last 12 months and cannot continue doing it" ~ 1, interview.section_n.section_n_lcsi.N11 == "Yes" | interview.section_n.section_n_lcsi.N11 == "No, because I have already engaged in this activity in the last 12 months and cannot continue doing it" ~ 1, TRUE ~ 0)) -> fsnms_data

## creates lcsi crisis variable
fsnms_data %>% mutate(LCSI_Crisis = case_when(interview.section_n.section_n_lcsi.N12 == "Yes" | interview.section_n.section_n_lcsi.N12 == "No, because I have already engaged in this activity in the last 12 months and cannot continue doing it" ~ 1, interview.section_n.section_n_lcsi.N13 == "Yes" | interview.section_n.section_n_lcsi.N13 == "No, because I have already done this activity in the last 12 months and cannot continue doing it" ~ 1, interview.section_n.section_n_lcsi.N14 == "Yes" | interview.section_n.section_n_lcsi.N14 == "No, because I already sold or ate all my seeds in the last 12 months and cannot continue doing it" ~ 1, TRUE ~ 0))  -> fsnms_data

## creates lcsi emergency variable
fsnms_data %>% mutate(LCSI_Emergency = case_when(interview.section_n.section_n_lcsi.N15 == "Yes" | interview.section_n.section_n_lcsi.N15 == "No, because I have already sold this asset in the last 12 months and cannot continue doing it" ~ 1, interview.section_n.section_n_lcsi.N16 == "Yes" | interview.section_n.section_n_lcsi.N16 == "No, because I have already engaged in this activity in the last 12 months and cannot continue doing it" ~ 1, interview.section_n.section_n_lcsi.N17 == "Yes" | interview.section_n.section_n_lcsi.N17 == "No, because I have already engaged in this activity in the last 12 months and cannot continue doing it" ~ 1, TRUE ~ 0)) -> fsnms_data

## creates lcsi classification variable
fsnms_data %>% mutate(LCSI_Classification = case_when(LCSI_Emergency == 1 ~ "Emergency Coping", LCSI_Crisis == 1 ~ "Crises Coping", LCSI_Stress == 1 ~ "Stress Coping", TRUE ~ "No Coping")) -> fsnms_data



# table(fsnms_data$interview.section_n.section_n_lcsi.N08, useNA = "ifany")
# table(fsnms_data$interview.section_n.section_n_lcsi.N09, useNA = "ifany")
# table(fsnms_data$interview.section_n.section_n_lcsi.N10, useNA = "ifany")
# table(fsnms_data$interview.section_n.section_n_lcsi.N11, useNA = "ifany")
# table(fsnms_data$interview.section_n.section_n_lcsi.N12, useNA = "ifany")
# table(fsnms_data$interview.section_n.section_n_lcsi.N13, useNA = "ifany")
# table(fsnms_data$interview.section_n.section_n_lcsi.N14, useNA = "ifany")
# table(fsnms_data$interview.section_n.section_n_lcsi.N15, useNA = "ifany")
# table(fsnms_data$interview.section_n.section_n_lcsi.N16, useNA = "ifany")
# table(fsnms_data$interview.section_n.section_n_lcsi.N17, useNA = "ifany")
# table(fsnms_data$LCSI_Stress, useNA = "ifany")
# table(fsnms_data$LCSI_Crisis, useNA = "ifany")
# table(fsnms_data$LCSI_Emergency, useNA = "ifany")
# table(fsnms_data$LCSI_Classification, useNA = "ifany")

########################################################################
### Creates HHS Indicators
########################################################################

## Source Document:
## https://www.fantaproject.org/monitoring-and-evaluation/household-hunger-scale-hhs

## creates variables for no food to eat
fsnms_data %>% mutate(HHS_Q1 = case_when(interview.section_j.J06 == "No" ~ 0, interview.section_j.J06 == "Yes" & interview.section_j.J06b == "Rarely (1–2 times)" ~ 1, interview.section_j.J06 == "Yes" & interview.section_j.J06b == "Sometimes (3–10 times)" ~ 1, interview.section_j.J06 == "Yes" & interview.section_j.J06b == "Often (more than 10 times)" ~ 2)) -> fsnms_data

## creates variable for go to sleep hungry
fsnms_data %>% mutate(HHS_Q2 = case_when(interview.section_j.J08 == "No" ~ 0, interview.section_j.J08 == "Yes" & interview.section_j.J08b == "Rarely (1–2 times)" ~ 1, interview.section_j.J08 == "Yes" & interview.section_j.J08b == "Sometimes (3–10 times)" ~ 1, interview.section_j.J08 == "Yes" & interview.section_j.J08b == "Often (more than 10 times)" ~ 2)) -> fsnms_data

## creates variable for day and night no food
fsnms_data %>% mutate(HHS_Q3 = case_when(interview.section_j.J09 == "No" ~ 0, interview.section_j.J09 == "Yes" & interview.section_j.J09b == "Rarely (1–2 times)" ~ 1, interview.section_j.J09 == "Yes" & interview.section_j.J09b == "Sometimes (3–10 times)" ~ 1, interview.section_j.J09 == "Yes" & interview.section_j.J09b == "Often (more than 10 times)" ~ 2)) -> fsnms_data

## creates variable for HHS score
fsnms_data %>% mutate(HHS = as.numeric(HHS_Q1 + HHS_Q2 + HHS_Q3)) -> fsnms_data

## creates variable for HHS score classification
fsnms_data %>% mutate(HHS_Classification = case_when(HHS >= 0 & HHS <= 1 ~ "Little to No Hunger", HHS >= 2 & HHS <= 3 ~ "Moderate Hunger", HHS >= 4 & HHS <= 6 ~ "Severe Hunger")) -> fsnms_data

## creates variable for HHS categories
fsnms_data %>% mutate(HHS_Q1_yn = ifelse(interview.section_j.J06 == "Yes", 1, 0),
                      HHS_Q2_yn = ifelse(interview.section_j.J08 == "Yes", 1, 0),
                      HHS_Q3_yn = ifelse(interview.section_j.J09 == "Yes", 1, 0),
                      HHS_Q1_freq = interview.section_j.J06b,
                      HHS_Q2_freq = interview.section_j.J08b,
                      HHS_Q3_freq = interview.section_j.J09b) -> fsnms_data

# table(fsnms_data$HHS_Q1, useNA = "ifany")
# table(fsnms_data$HHS_Q2, useNA = "ifany")
# table(fsnms_data$HHS_Q3, useNA = "ifany")
# table(fsnms_data$HHS_Q1_yn, useNA = "ifany")
# table(fsnms_data$HHS_Q2_yn, useNA = "ifany")
# table(fsnms_data$HHS_Q3_yn, useNA = "ifany")
# table(fsnms_data$HHS_Q1_freq, useNA = "ifany")
# table(fsnms_data$HHS_Q2_freq, useNA = "ifany")
# table(fsnms_data$HHS_Q3_freq, useNA = "ifany")
# table(fsnms_data$HHS, useNA = "ifany")
# table(fsnms_data$HHS_Classification, useNA = "ifany")

########################################################################
### Creates CARI Indicators
########################################################################

## Source Document:
## https://www.wfp.org/publications/consolidated-approach-reporting-indicators-food-security-cari-guidelines

# creates variable for FCS and rCSI CARI reclassification
fsnms_data %>% mutate(FCS_rCSI_CARI = case_when(FCS_Classification == "Acceptable" & rCSI < 4 ~ 1, FCS_Classification == "Acceptable" & rCSI >= 4 ~ 2, FCS_Classification == "Borderline" ~ 3, FCS_Classification == "Poor" ~ 4)) -> fsnms_data

# creates variable for LCSI CARI reclassification
fsnms_data %>% mutate(LCSI_CARI = case_when(LCSI_Classification == "No Coping" ~ 1, LCSI_Classification == "Stress Coping" ~ 2, LCSI_Classification == "Crises Coping" ~ 3, LCSI_Classification == "Emergency Coping" ~ 4)) -> fsnms_data

# creates variable for FES CARI reclassification
fsnms_data %>% mutate(FES_CARI = case_when(FES_Classification == "<50%" ~ 1, FES_Classification == "50%-65%" ~ 2, FES_Classification == "65%-75%" ~ 3, FES_Classification == ">75%" ~ 4)) -> fsnms_data

# creates variables for CARI Current Status (CS) and CARI Coping Capacity (CC)
fsnms_data$CS_CARI <- fsnms_data$FCS_rCSI_CARI
fsnms_data$CC_CARI <- (fsnms_data$LCSI_CARI + fsnms_data$FES_CARI)/2

# creates variables for CARI Score
fsnms_data$CARI <- (fsnms_data$CS_CARI + fsnms_data$CC_CARI)/2

# creates variables for CARI Score Classification
fsnms_data %>% mutate(CARI_Classification = case_when(CARI >= 3.5 ~ "Severely Food Insecure", CARI < 3.5 & CARI >= 2.5 ~ "Moderately Food Insecure", CARI < 2.5 & CARI >= 1.5 ~ "Marginally Food Secure", CARI < 1.5 & CARI >= 0 ~ "Food Secure")) -> fsnms_data


# table(fsnms_data$FCS_rCSI_CARI, useNA = "ifany")
# table(fsnms_data$LCSI_CARI, useNA = "ifany")
# table(fsnms_data$FES_CARI, useNA = "ifany")
# table(fsnms_data$CS_CARI, useNA = "ifany")
# table(fsnms_data$CC_CARI, useNA = "ifany")
# table(fsnms_data$CARI, useNA = "ifany")
# table(fsnms_data$CARI_Classification, useNA = "ifany")

########################################################################
### Creates IPC Reference Table Equivalents
########################################################################

## Data Source: https://www.ipcinfo.org/fileadmin/user_upload/ipcinfo/manual/IPC_Technical_Manual_3_Final.pdf

## creates variable of IPC equivalents per the IPC reference table
fsnms_data %>% mutate(IPC_HDDS = case_when(as.numeric(HDDS) >= 5 & as.numeric(HDDS) <= 12 ~ "Phase 1 or 2", as.numeric(HDDS) >= 3 & as.numeric(HDDS) <= 4 ~ "Phase 3", as.numeric(HDDS) >= 0 & as.numeric(HDDS) <= 2 ~ "Phase 4 or 5"), IPC_FCS = case_when(FCS > 35 ~ "Phase 1 or 2", FCS > 21 & FCS <= 35 ~ "Phase 3",  FCS >= 0 & FCS <= 21 ~"Phase 4 or 5"), IPC_HHS = case_when(HHS == 0 ~ "Phase 1", HHS == 1 ~ "Phase 2", HHS >= 2 & HHS <= 3 ~ "Phase 3", HHS == 4 ~ "Phase 4", HHS >= 5 & HHS <= 6 ~ "Phase 5"), IPC_RCSI = case_when(rCSI >= 0 & rCSI <=3 ~ "Phase 1", rCSI >= 4 & rCSI <=18 ~ "Phase 2", rCSI >= 19 ~ "Phase 3, 4, or 5"), IPC_LCSI = case_when(LCSI_Classification == "No Coping" ~ "Phase 1", LCSI_Classification == "Stress Coping" ~ "Phase 2", LCSI_Classification == "Crises Coping" ~ "Phase 3", LCSI_Classification == "Emergency Coping" ~ "Phase 4 or 5")) -> fsnms_data

# table(fsnms_data$IPC_HDDS, useNA = "ifany")
# table(fsnms_data$IPC_FCS, useNA = "ifany")
# table(fsnms_data$IPC_HHS, useNA = "ifany")
# table(fsnms_data$IPC_RCSI, useNA = "ifany")
# table(fsnms_data$IPC_LCSI, useNA = "ifany")



##########################################################
## Creates discrete color palettes for vizualization of categorical values
##########################################################

main_blue <- "#007DBC"
main_light_blue <- "#36B5C5"
main_navy <- "#1A4262"
main_green <- "#008868"
main_light_green <- "#00B485"
main_red <- "#982B56"
main_light_red <- "#EF404C"
main_grey <- "#999999"
main_light_grey <- "#E6E6E6"
main_orange <- "#F47847"
main_brown <- "#B79F8D"
main_tan <- "#ECDFBB"
main_black <- "#000000"
main_white <- "#FFFFFF"

## creates blue color palette object
pal_blue_wfp <- c(
  "blue1" = colorspace::lighten(main_blue, 0.75),
  "blue2" = colorspace::lighten(main_blue, 0.50),
  "blue3" = colorspace::lighten(main_blue, 0.25),
  "blue4" = main_blue,
  "blue5" = colorspace::darken(main_blue, 0.25),
  "blue6" = colorspace::darken(main_blue, 0.50),
  "blue7" = colorspace::darken(main_blue, 0.75)
)

## creates navy color palette object
pal_navy_wfp <- c(
  "navy1" = colorspace::lighten(main_navy, 0.75),
  "navy2" = colorspace::lighten(main_navy, 0.50),
  "navy3" = colorspace::lighten(main_navy, 0.25),
  "navy4" = main_navy,
  "navy5" = colorspace::darken(main_navy, 0.25),
  "navy6" = colorspace::darken(main_navy, 0.50),
  "navy7" = colorspace::darken(main_navy, 0.75)
)

## creates green color palette object
pal_green_wfp <- c(
  "green1" = colorspace::lighten(main_green, 0.75),
  "green2" = colorspace::lighten(main_green, 0.50),
  "green3" = colorspace::lighten(main_green, 0.25),
  "green4" = main_green,
  "green5" = colorspace::darken(main_green, 0.25),
  "green6" = colorspace::darken(main_green, 0.50),
  "green7" = colorspace::darken(main_green, 0.75)
)

## creates red color palette object
pal_red_wfp <- c(
  "red1" = colorspace::lighten(main_red, 0.75),
  "red2" = colorspace::lighten(main_red, 0.50),
  "red3" = colorspace::lighten(main_red, 0.25),
  "red4" = main_red,
  "red5" = colorspace::darken(main_red, 0.25),
  "red6" = colorspace::darken(main_red, 0.50),
  "red7" = colorspace::darken(main_red, 0.75)
)

## creates grey color palette object
pal_grey_wfp <- c(
  "grey1" = colorspace::lighten(main_grey, 0.75),
  "grey2" = colorspace::lighten(main_grey, 0.50),
  "grey3" = colorspace::lighten(main_grey, 0.25),
  "grey4" = main_grey,
  "grey5" = colorspace::darken(main_grey, 0.25),
  "grey6" = colorspace::darken(main_grey, 0.50),
  "grey7" = colorspace::darken(main_grey, 0.75)
)

## creates orange color palette object
pal_orange_wfp <- c(
  "orange1" = colorspace::lighten(main_orange, 0.75),
  "orange2" = colorspace::lighten(main_orange, 0.50),
  "orange3" = colorspace::lighten(main_orange, 0.25),
  "orange4" = main_orange,
  "orange5" = colorspace::darken(main_orange, 0.25),
  "orange6" = colorspace::darken(main_orange, 0.50),
  "orange7" = colorspace::darken(main_orange, 0.75)
)



## creates color palette object aligned with WFP corporate guidance
pal_main <- c(main_blue, main_light_blue, main_navy, main_grey, main_green, main_light_green, main_orange, main_red, main_brown, main_light_red, main_tan)

## creates color palette object aligned with ipc guidance
# https://www.ipcinfo.org/fileadmin/user_upload/ipcinfo/docs/IPC_Acute_Food_Insecurity_Mapping_Guidelines.pdf

pal_ipc <- c("#CDFACD","#FAE61E","#E67800","#C80000", "#640000")

## creates color palette object aligned with ipc guidance
# https://docs.wfp.org/api/documents/WFP-0000134704/download/?_ga=2.91951514.145906710.1681992709-313551633.1680773110
pal_stoplight_3pt <- c("#92D050","#FFFF00","#FF0000")

## creates color palette object aligned with ipc guidance
pal_stoplight_4pt <- c("#92D050","#FFFF00","#FFC000","#FF0000")

## creates object containing palette name, potential palette applications, and min/max number of categories palette can accommodate
wfpcolors <- tibble::tibble(name = c("pal_wfp_main",
                                       "pal_ipc",
                                       "pal_stoplight_3pt",
                                       "pal_stoplight_4pt",
                                       "pal_blue",
                                       "pal_navy",
                                       "pal_green",
                                       "pal_red",
                                       "pal_orange",
                                       "pal_grey",
                                       "pal_blue_red",
                                       "pal_navy_red"),
                              type = c(rep("qualitative", 4),
                                       rep("sequential", 6),
                                       rep("diverging", 2)),
                              min_n = 1,
                              max_n = c(c(10, 5, 3, 4),
                                        rep(7, 6),
                                        rep(9, 2)),
                              n1 = list(pal_main[1],
                                        pal_ipc[1],
                                        pal_stoplight_3pt[1],
                                        pal_stoplight_4pt[1],
                                        pal_blue_wfp[4],
                                        pal_navy_wfp[5],
                                        pal_green_wfp[4],
                                        pal_red_wfp[4],
                                        pal_orange_wfp[3],
                                        pal_grey_wfp[4],
                                        NULL, NULL),
                              n2 = list(pal_main[1:2],
                                        pal_ipc[1:2],
                                        pal_stoplight_3pt[1:2],
                                        pal_stoplight_4pt[1:2],
                                        c(pal_blue_wfp[2], pal_blue_wfp[6]),
                                        c(pal_navy_wfp[2], pal_navy_wfp[6]),
                                        c(pal_green_wfp[2], pal_green_wfp[6]),
                                        c(pal_red_wfp[2], pal_red_wfp[6]),
                                        c(pal_orange_wfp[2], pal_orange_wfp[6]),
                                        c(pal_grey_wfp[2], pal_grey_wfp[6]),
                                        c(pal_blue_wfp[2], pal_red_wfp[6]),
                                        c(pal_navy_wfp[2], pal_red_wfp[6])),
                              n3 = list(pal_main[1:3],
                                        pal_ipc[1:3],
                                        pal_stoplight_3pt[1:3],
                                        pal_stoplight_4pt[1:3],
                                        pal_blue_wfp[3:5],
                                        pal_navy_wfp[3:5],
                                        pal_green_wfp[3:5],
                                        pal_red_wfp[3:5],
                                        pal_orange_wfp[3:5],
                                        pal_grey_wfp[3:5],
                                        c(pal_blue_wfp[4], pal_grey_wfp[1], pal_red_wfp[4]),
                                        c(pal_navy_wfp[4], pal_grey_wfp[1], pal_red_wfp[4])),
                              n4 = list(pal_main[1:4],
                                        pal_ipc[1:4],
                                        NULL,
                                        pal_stoplight_4pt[1:4],
                                        pal_blue_wfp[2:5],
                                        pal_navy_wfp[2:5],
                                        pal_green_wfp[2:5],
                                        pal_red_wfp[2:5],
                                        pal_orange_wfp[2:5],
                                        pal_grey_wfp[2:5],
                                        c(pal_blue_wfp[4], pal_blue_wfp[2],
                                          pal_red_wfp[2], pal_red_wfp[4]),
                                        c(pal_navy_wfp[5], pal_navy_wfp[3],
                                          pal_red_wfp[2], pal_red_wfp[4])),
                              n5 = list(pal_main[1:5],
                                        pal_ipc[1:5],
                                        NULL,
                                        NULL,
                                        pal_blue_wfp[2:6],
                                        pal_navy_wfp[2:6],
                                        pal_green_wfp[2:6],
                                        pal_red_wfp[2:6],
                                        pal_orange_wfp[2:6],
                                        pal_grey_wfp[2:6],
                                        c(pal_blue_wfp[5], pal_blue_wfp[2],
                                          pal_grey_wfp[1],
                                          pal_red_wfp[2], pal_red_wfp[5]),
                                        c(pal_navy_wfp[5], pal_navy_wfp[3],
                                          pal_grey_wfp[1],
                                          pal_red_wfp[3], pal_red_wfp[5])),
                              n6 = list(pal_main[1:6],
                                        NULL,
                                        NULL,
                                        NULL,
                                        pal_blue_wfp[1:6],
                                        pal_navy_wfp[1:6],
                                        pal_green_wfp[1:6],
                                        pal_red_wfp[1:6],
                                        pal_orange_wfp[1:6],
                                        pal_grey_wfp[1:6],
                                        c(pal_blue_wfp[4:2],  pal_red_wfp[2:4]),
                                        c(pal_navy_wfp[5:3], pal_red_wfp[2:4])),
                              n7 = list(pal_main[1:7],
                                        NULL,
                                        NULL,
                                        NULL,
                                        pal_blue_wfp[1:7],
                                        pal_navy_wfp[1:7],
                                        pal_green_wfp[1:7],
                                        pal_red_wfp[1:7],
                                        pal_orange_wfp[1:7],
                                        pal_grey_wfp[1:7],
                                        c(pal_blue_wfp[4:2],  pal_grey_wfp[1], pal_red_wfp[2:4]),
                                        c(pal_navy_wfp[5:3], pal_grey_wfp[1], pal_red_wfp[2:4])),
                              n8 = list(pal_main[1:8],
                                        NULL,NULL, NULL,
                                        NULL, NULL, NULL,
                                        NULL, NULL, NULL,
                                        c(pal_blue_wfp[5:2], pal_red_wfp[2:5]),
                                        c(pal_navy_wfp[5:2], pal_red_wfp[2:5])),
                              n9 = list(pal_main[1:9],
                                        NULL, NULL, NULL,
                                        NULL, NULL, NULL,
                                        NULL, NULL, NULL,
                                        c(pal_blue_wfp[5:2], pal_grey_wfp[1], pal_red_wfp[2:5]),
                                        c(pal_navy_wfp[5:2], pal_grey_wfp[1], pal_red_wfp[2:5])),
                              n10 = list(pal_main,
                                         NULL, NULL, NULL,
                                         NULL, NULL, NULL,
                                         NULL, NULL, NULL,
                                         NULL, NULL))


wfpcolors <- as.data.frame(wfpcolors)


##########################################################
## Creates continuous color palettes for vizualization of continuous values
##########################################################

scale_colour_wfp_a <- function(..., type = "sequential",
                                palette = 1,
                                direction = 1,
                                na.value = "#E9E9E9", guide = "colourbar") {

  pal <- wfp_pal_scale(type = type,
                         palette = palette,
                         direction = direction)(256)

  continuous_scale("colour",
                   "wfp_continuous",
                   gradient_n_pal(pal),
                   na.value = na.value,
                   guide = guide,
                   ...)
}


scale_colour_wfp_b <- function(..., type = "qualitative",
                                palette = 1,
                                direction = 1,
                                nmax = NULL,
                                order = NULL,
                                na.value = "#E9E9E9") {

  pal <- wfp_pal_scale(type = type,
                         palette = palette,
                         nmax = nmax,
                         order = order,
                         direction = direction)

  discrete_scale("colour",
                 "wfp_discrete",
                 pal,
                 na.value = na.value,
                 ...)
}



##########################################################
## Creates continuous color palettes for vizualization of continuous values
##########################################################

scale_fill_wfp_a <- function(..., type = "sequential",
                               palette = 1,
                               direction = 1,
                               na.value = "#E9E9E9",
                               guide = "colourbar") {

  pal <- wfp_pal_scale(type = type,
                         palette = palette,
                         direction = direction)(256)

  continuous_scale("fill",
                   "wfp_continuous",
                   gradient_n_pal(pal),
                   na.value = na.value,
                   guide = guide,
                   ...)
}


scale_fill_wfp_b <- function(..., type = "qualitative",
                               palette = 1,
                               direction = 1,
                               nmax = NULL,
                               order = NULL,
                               na.value	= "#E9E9E9") {

  pal <- wfp_pal_scale(type = type,
                         palette = palette,
                         nmax = nmax,
                         order = order,
                         direction = direction)

  discrete_scale("fill",
                 "wfp_discrete",
                 pal,
                 na.value = na.value,
                 ...)
}



##########################################################
## Creates a series of functions to validate the palette name and ensure the the palette aligns with data type and number of categories
##########################################################

wfp_pal_scale <- function(type = "qualitative",
                            nmax = NULL, order = NULL,
                            palette = 1, direction = 1) {
  pal <- wfp_pal_name(palette, type)

  function(n) {
    if (is.null(nmax) | type != "qualitative")
      nmax <- n
    if (is.null(order) | type != "qualitative")
      order <- 1:n

    if (n > nmax) {
      warning("Insufficient values in scale_{color|fill}_wfp_d. ", n, " needed but only ",
              nmax, " provided.", call. = FALSE)
    }

    # If less than 3 colors are requested, brewer.pal will return a 3-color palette and
    # give a warning. This warning isn't useful, so suppress it.
    # If the palette has k colors and >k colors are requested, brewer.pal will
    # return a k-color palette and give a warning. This warning is useful, so
    # don't suppress it.

    if (nmax < 3) {
      pal <- suppressWarnings(wfp_pal(nmax, pal))
    } else {
      pal <- wfp_pal(nmax, pal)
    }

    # In both cases ensure we have n items
    pal <- pal[order]

    if (direction == -1)
      pal = rev(pal)

    unname(pal)
  }
}


##########################################################
## Creates function to validate whether palette name is valid otherwise replaces with pal_blue
##########################################################

wfp_pal_name <- function(palette, type) {
  if (is.character(palette)) {
    if (!palette %in% wfpcolors$name) {
      warning("Unknown palette ", palette)
      palette = "pal_blue"
    }
    return(palette)
  }
  type <- match.arg(type, unique(wfpcolors$type))
  wfpcolors$name[wfpcolors$type == type][palette]
}


##########################################################
## Creates function to validate whether palette has enough categories to allow for vizualization
##########################################################

wfp_pal <- function(n = NULL, name, ...){
  if (!(name %in% wfpcolors$name)){
    stop(paste(name, "is not a valid palette name\n"),
         call. = FALSE)
  }
  selected_metadata <- wfpcolors[wfpcolors$name == name, ]
  min_n <- selected_metadata$min_n
  max_n <- selected_metadata$max_n
  type <- selected_metadata$type
  if (is.null(n)) {
    n <- max_n
  }
  proper_n <- n
  if (proper_n > max_n) {
    proper_n <- max_n
  }
  if (!(n %in% min_n:max_n) && type == "qualitative") {
    warning(paste("Number of colors (n) in the", name,
                  "palette should be between", min_n, "and", max_n,
                  "\n"), call. = FALSE)
  }
  if (n < min_n) {
    warning(paste("Number of colors (n) in the", name,
                  "palette should be between", min_n, "and",
                  max_n, "\n"), call. = FALSE)
    proper_n <- min_n
    n <- min_n
  }
  coln <- paste0("n", proper_n)
  colors <- wfpcolors[wfpcolors$name == name, ][[coln]][[1]]
  if (n > 2) {
    colors <- grDevices::colorRampPalette(colors, ...)(n = n)
  }
  colors
}


##########################################################
## Creates a function that displays the color palettes
##########################################################

display_wfp_all <- function(n = NULL, type = "all") {
  wfpcolors <- wfpcolors[nrow(wfpcolors):1, ]
  if (any(type == "all")) {
    selected_type <- wfpcolors
  } else if (any(type %in% c("qualitative", "sequential", "diverging"))) {
    selected_type <- wfpcolors[wfpcolors$type %in% type, ]
  } else {
    stop(paste(type, "is not a valid name for a color type\n"))
  }
  selected_metadata <- wfpcolors[wfpcolors$name %in% selected_type$name, ]

  n_colors <- nrow(selected_metadata)

  if (is.null(n)) {
    my_n <- selected_metadata$max_n
  } else{
    my_n <- rep(n, n_colors)
  }

  selected_colors <- vector("list", n_colors)

  ylim <- c(0, n_colors)
  oldpar <- par(mgp = c(2, 0.25, 0))
  on.exit(par(oldpar))
  max_my_n <- max(my_n)
  plot(1, 1, xlim = c(-1.5, max_my_n), ylim = ylim,
       type = "n", axes = FALSE, bty = "n", xlab = "", ylab = "")

  for(i in seq_len(n_colors)) {
    one_color <- wfp_pal(n = my_n[i],
                           name = selected_metadata$name[i])
    rect(xleft = 0:(my_n[i] - 1),
         ybottom = i - 1,
         xright = 1:my_n[i],
         ytop = i - 0.2,
         col = one_color,
         border = "white")
    text(-0.1, i - 0.6,
         labels = selected_metadata$name[i],
         xpd = TRUE,
         adj = 1)
  }
}


##########################################################
## Creates a function that stores a WFP ggplot theme
##########################################################

## resource outlining primary ggplot theme elements 
## https://ggplot2.tidyverse.org/reference/theme.html 
## https://ggplot2.tidyverse.org/reference/element.html

theme_wfp <- function(font_size = 10, font_family = "Open Sans", line_size = .5,
                            rel_small = 8 / 9, rel_tiny = 7 / 9, rel_large = 12 / 9,
                        grid = TRUE, axis = "x", axis_text = TRUE, axis_title = TRUE,
                        axis_ticks = FALSE, legend = TRUE, legend_title = FALSE) {

  ## establishment of margin formatting
  half_line <- font_size / 2

  ## establishment of colour pallete for font and line formatting
  wfp_blue <- "#007DBC"
  dark_grey <- "#191919"
  medium_grey <- "#666666"
  light_grey <- "#CCCCCC"
  
  ## establishment of default theme formatting 
  ret <- ggplot2::theme_minimal(base_family = font_family, base_size = font_size)

  ## modification of default theme formatting
  ret <- ret + ggplot2::theme(line = ggplot2::element_line(
    color = "black", size = line_size, linetype = 1, lineend = "butt"
  ))
  ret <- ret + ggplot2::theme(rect = ggplot2::element_rect(
    fill = NA, color = NA, size = line_size, linetype = 1
  ))
  ret <- ret + ggplot2::theme(text = ggplot2::element_text(
    family = font_family, face = "plain", color = dark_grey,
    size = font_size, hjust = 0.5, vjust = 0.5, angle = 0, lineheight = .9,
    margin = ggplot2::margin(), debug = FALSE
  ))

  ## establishment of legend formatting
  if (!legend) {
    ret <- ret + theme(legend.position = "none")
  } else {
    ret <- ret + ggplot2::theme(legend.background = ggplot2::element_blank())
    ret <- ret + ggplot2::theme(legend.spacing = grid::unit(font_size, "pt"))
    ret <- ret + ggplot2::theme(legend.margin = ggplot2::margin(0, 0, 0, 0))
    ret <- ret + ggplot2::theme(legend.key = ggplot2::element_blank())
    ret <- ret + ggplot2::theme(legend.key.size = grid::unit(1.2 * font_size, "pt"))
    ret <- ret + ggplot2::theme(legend.text = ggplot2::element_text(color = dark_grey, size = rel(rel_small)))
    ret <- ret + ggplot2::theme(legend.position = "top")
    ret <- ret + ggplot2::theme(legend.direction = "horizontal")
    ret <- ret + ggplot2::theme(legend.justification = 0)
    ret <- ret + ggplot2::theme(legend.box.margin = ggplot2::margin(0, 0, 0, 0))
    ret <- ret + ggplot2::theme(legend.box.background = ggplot2::element_blank())
    ret <- ret + ggplot2::theme(legend.box.spacing = grid::unit(font_size, "pt"))
    if (!legend_title) {
      ret <- ret + theme(legend.title = element_blank())
    } else {
      ret <- ret + ggplot2::theme(legend.title = ggplot2::element_text(size = rel(rel_small),
                                                                       color = dark_grey,
                                                                       hjust = 0))
    }
  }

  ## establishment of grid formatting for panel (i.e. space behind faceted plots)
  if (inherits(grid, "character") | grid == TRUE) {
    ret <- ret + ggplot2::theme(panel.grid = ggplot2::element_line(color = light_grey, size = line_size / 2))
    ret <- ret + ggplot2::theme(panel.grid.major = ggplot2::element_line(color = light_grey, size = line_size / 2))
    ret <- ret + ggplot2::theme(panel.grid.minor = ggplot2::element_line(color = light_grey, size = line_size / 2))

    if (inherits(grid, "character")) {
      if (regexpr("X", grid)[1] < 0) ret <- ret + ggplot2::theme(panel.grid.major.x = ggplot2::element_blank())
      if (regexpr("Y", grid)[1] < 0) ret <- ret + ggplot2::theme(panel.grid.major.y = ggplot2::element_blank())
      if (regexpr("x", grid)[1] < 0) ret <- ret + ggplot2::theme(panel.grid.minor.x = ggplot2::element_blank())
      if (regexpr("y", grid)[1] < 0) ret <- ret + ggplot2::theme(panel.grid.minor.y = ggplot2::element_blank())
    }
  } else {
    ret <- ret + ggplot2::theme(panel.grid = ggplot2::element_blank())
  }

  ## establishment of formatting for panel (i.e. space behind faceted plots)
  ret <- ret + ggplot2::theme(panel.background = ggplot2::element_blank())
  ret <- ret + ggplot2::theme(panel.border = ggplot2::element_blank())
  ret <- ret + ggplot2::theme(panel.spacing = grid::unit(half_line, "pt"))
  ret <- ret + ggplot2::theme(panel.ontop = FALSE)

  ## establishment of formatting for axis
  if (inherits(axis, "character") | axis == TRUE) {
    ret <- ret + ggplot2::theme(axis.line = ggplot2::element_line(
      color = dark_grey, size = line_size,
      lineend = "square"
    ))
    if (inherits(axis, "character")) {
      axis <- tolower(axis)
      if (regexpr("x", axis)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.line.x = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.line.x = ggplot2::element_line(
          color = dark_grey, size = line_size,
          lineend = "square"
        ))
      }
      if (regexpr("y", axis)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.line.y = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.line.y = ggplot2::element_line(
          color = dark_grey, size = line_size,
          lineend = "square"
        ))
      }
    } else {
      ret <- ret + ggplot2::theme(axis.line.x = ggplot2::element_line(
        color = dark_grey, size = line_size,
        lineend = "square"
      ))
      ret <- ret + ggplot2::theme(axis.line.y = ggplot2::element_line(
        color = dark_grey, size = line_size,
        lineend = "square"
      ))
    }
  } else {
    ret <- ret + ggplot2::theme(axis.line = ggplot2::element_blank())
  }

  ## establishment of formatting for axis text
  if (inherits(axis_text, "character") | axis_text == TRUE) {
    ret <- ret + ggplot2::theme(axis.text = ggplot2::element_text(size = rel(rel_small), color = dark_grey))
    if (inherits(axis_text, "character")) {
      axis_text <- tolower(axis_text)
      if (regexpr("x", axis_text)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.text.x = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.text.x = ggplot2::element_text(margin = ggplot2::margin(
          t = rel_small * font_size / 4
        ), vjust = 1))
        ret <- ret + ggplot2::theme(axis.text.x.top = ggplot2::element_text(margin = ggplot2::margin(
          b = rel_small * font_size / 4
        ), vjust = 0))
      }
      if (regexpr("y", axis_text)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.text.y = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.text.y = ggplot2::element_text(margin = ggplot2::margin(
          r = rel_small * font_size / 4
        ), hjust = 1))
        ret <- ret + ggplot2::theme(axis.text.y.right = ggplot2::element_text(margin = ggplot2::margin(
          l = rel_small * font_size / 4
        ), hjust = 0))
      }
    } else {
      ret <- ret + ggplot2::theme(axis.text.x = ggplot2::element_text(margin = ggplot2::margin(
        t = rel_small * font_size / 4
      ), vjust = 1))
      ret <- ret + ggplot2::theme(axis.text.x.top = ggplot2::element_text(margin = ggplot2::margin(
        b = rel_small * font_size / 4
      ), vjust = 0))
      ret <- ret + ggplot2::theme(axis.text.y = ggplot2::element_text(margin = ggplot2::margin(
        r = rel_small * font_size / 4
      ), hjust = 1))
      ret <- ret + ggplot2::theme(axis.text.y.right = ggplot2::element_text(margin = ggplot2::margin(
        l = rel_small * font_size / 4
      ), hjust = 0))
    }
  } else {
    ret <- ret + ggplot2::theme(axis.text = ggplot2::element_blank())
  }

  ## establishment of formatting for axis title
  if (inherits(axis_title, "character") | axis_title == TRUE) {
    ret <- ret + ggplot2::theme(axis.title = ggplot2::element_text(size = rel(rel_small), color = medium_grey))
    if (inherits(axis_title, "character")) {
      axis_title <- tolower(axis_title)
      if (regexpr("x", axis_title)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.title.x = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.title.x = ggplot2::element_text(margin = ggplot2::margin(
          t = rel_small * font_size / 4
      ), vjust = 1))
        ret <- ret + ggplot2::theme(axis.title.x.top = ggplot2::element_text(margin = ggplot2::margin(
          b = rel_small * font_size / 4
        ), vjust = 0))
      }
      if (regexpr("y", axis_title)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.title.y = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.title.y = ggplot2::element_text(angle = 90, margin = ggplot2::margin(
          r = rel_small * font_size / 4
        ), vjust = 1))
        ret <- ret + ggplot2::theme(axis.title.y.right = ggplot2::element_text(angle = -90, margin = ggplot2::margin(
          l = rel_small * font_size / 4
        ), vjust = 0))
      }
    } else {
      ret <- ret + ggplot2::theme(axis.title.x = ggplot2::element_text(margin = ggplot2::margin(
        t = rel_small * font_size / 4
      ), vjust = 1))
      ret <- ret + ggplot2::theme(axis.title.x.top = ggplot2::element_text(margin = ggplot2::margin(
        b = rel_small * font_size / 4
      ), vjust = 0))
      ret <- ret + ggplot2::theme(axis.title.y = ggplot2::element_text(angle = 90, margin = ggplot2::margin(
        r = rel_small * font_size / 4
      ), vjust = 1))
      ret <- ret + ggplot2::theme(axis.title.y.right = ggplot2::element_text(angle = -90, margin = ggplot2::margin(
        l = rel_small * font_size / 4
      ), vjust = 0))
    }
  } else {
    ret <- ret + ggplot2::theme(axis.title = ggplot2::element_blank())
  }

  ## establishment of formatting for axis ticks
  if (inherits(axis_ticks, "character") | axis_ticks == TRUE) {
    ret <- ret + ggplot2::theme(axis.ticks.length = grid::unit(half_line / 2, "pt"))
    ret <- ret + ggplot2::theme(axis.ticks = ggplot2::element_line(color = dark_grey, size = line_size / 2))
    if (inherits(axis_ticks, "character")) {
      axis_ticks <- tolower(axis_ticks)
      if (regexpr("x", axis_ticks)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.ticks.x = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.ticks.x = ggplot2::element_line(color = dark_grey, size = line_size / 2))
      }
      if (regexpr("y", axis_ticks)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.ticks.y = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.ticks.y = ggplot2::element_line(color = dark_grey, size = line_size / 2))
      }
    } else {
      ret <- ret + ggplot2::theme(axis.ticks.x = ggplot2::element_line(color = dark_grey, size = line_size / 2))
      ret <- ret + ggplot2::theme(axis.ticks.y = ggplot2::element_line(color = dark_grey, size = line_size / 2))
    }
  } else {
    ret <- ret + ggplot2::theme(axis.ticks = element_blank())
  }

  ## establishment of formatting for strip text(i.e. heading above faceted plots)
  ret <- ret + ggplot2::theme(strip.text = ggplot2::element_text(
    hjust = 0, size = font_size,
    margin = ggplot2::margin(half_line / 2, half_line / 2, half_line / 2, half_line / 2)
  ))

  ## establishment of formatting for title and subtitle
  ret <- ret + ggplot2::theme(plot.title = ggplot2::element_text(
    size = rel(rel_large), color = "black", face = "bold",
    hjust = 0, vjust = 1,
    margin = ggplot2::margin(b = font_size),
  ))
  ret <- ret + ggplot2::theme(plot.subtitle = ggplot2::element_text(
    size = font_size, color = dark_grey, face = "plain",
    hjust = 0, vjust = 1,
    margin = ggplot2::margin(t = -half_line, b = font_size * rel_large)
  ))
  ret <- ret + ggplot2::theme(plot.title.position = "plot")

  ## establishment of formatting for caption (i.e. footnote or source text)
  ret <- ret + ggplot2::theme(plot.caption = ggplot2::element_text(
    size = rel(rel_tiny), color = medium_grey,
    hjust = 0, vjust = 1,
    margin = ggplot2::margin(t = half_line)
  ))
  ret <- ret + ggplot2::theme(plot.caption.position = "plot")

  ## establishment of formatting for tags (i.e. figure label)
  ret <- ret + ggplot2::theme(plot.tag = ggplot2::element_text(
    size = font_size, color = wfp_blue,
    hjust = 0, vjust = 1
  ))
  ret <- ret + ggplot2::theme(plot.tag.position = c(0, 1))

  ## establishment of formatting for plot background
  ret <- ret + ggplot2::theme(plot.background = ggplot2::element_blank())
  ret <- ret + ggplot2::theme(plot.margin = ggplot2::margin(font_size, font_size, font_size, font_size))

  ## establishment of formatting for font sizing
  class(ret) <- c("conditional_wfp_theme", class(ret))
  attr(ret, "font_size") <- font_size
  ret
}


##########################################################
## Creates a function the updates the default gemo font family to Open Sans
##########################################################

update_geom_font_defaults <- function(family = "Open Sans", face = "plain", size = 3.5,
                                      color = "#191919") {
  ggplot2::update_geom_defaults("text", list(family = family, face = face, size = size, color = color))
  ggplot2::update_geom_defaults("label", list(family = family, face = face, size = size, color = color))
}

```

# Color Palette Preview

------------------------------------------------------------------------

```{r display_palettes}

##########################################################
## Displays the available color palettes
##########################################################

display_wfp_all()

```

# Bar Charts

------------------------------------------------------------------------

## Basic Bar Chart

```{r ggplot_barchart_single, message = FALSE, warning = FALSE}

##########################################################
## Generates horizontal bar chart with single blue fill color
##########################################################

fsnms_data %>% group_by(`interview.section_c.C01`) %>% 
  summarise(hh_size = mean(as.numeric(interview.b01_note.Cal_Total_family_members), na.rm = TRUE)) %>% 
  rename(residency_status = `interview.section_c.C01`) -> x


ggplot(x) +
  geom_col(aes(
    x = hh_size,
    y = reorder(residency_status, hh_size),
  ),
  fill = wfp_pal(n = 1, "pal_blue"),
  width = 0.8
  ) +
  labs(
    title = "Average Household Size by Residency Status | 2022",
    subtitle = "Average Number of Individuals",
    x = "Household Size",
    y = "State",
    caption = "Source: WFP VAM Unit \n©  United Nations World Food Programme"
  ) + geom_text(aes(x = hh_size,
    y = residency_status, label = round(hh_size, 2)),
  hjust = -0.5,
  size = 8 / .pt
  ) +
  scale_x_continuous(
    expand = expansion(c(0, 0.1)),
    breaks = pretty_breaks(n = 7),
    labels = label_number()
  ) + theme_wfp(grid = FALSE, axis = "y", axis_title = FALSE, axis_text = "y")


```

## Faceted Bar Chart

```{r ggplot_barchart_multiple, message = FALSE, warning = FALSE}

##########################################################
## Generates horizontal bar chart with single blue fill color
##########################################################

fsnms_data %>% group_by(`interview.section_c.C01`, interview.section_b.B03) %>% 
  summarise(hh_size = mean(as.numeric(interview.b01_note.Cal_Total_family_members), na.rm = TRUE)) %>% 
  rename(residency_status = `interview.section_c.C01`, respondent_sex = interview.section_b.B03) -> x

ggplot(x) +
  geom_col(aes(
    x = hh_size,
    y = reorder(residency_status, hh_size),
    fill = as.character(respondent_sex)
  ),
  position = position_dodge(width = 0.7),
  width = 0.6
  ) +
  geom_text(aes(
    x = hh_size,
    y = reorder(residency_status, hh_size),
    group = as.character(respondent_sex),
    label = round(hh_size, 2)
  ),
  position = position_dodge(width = 0.7),
  hjust = -0.25, size = 8 / .pt
  ) +
  scale_fill_wfp_b(palette = "pal_blue") +
  labs(
    title = "Average Household Size by Residency Status and Respondent Sex | 2022",
    subtitle = "Average Number of Individuals",
    caption = "Source: WFP VAM Unit \n©  United Nations World Food Programme"
  ) +
  scale_x_continuous(expand = expansion(c(0, 0.1))) +
  scale_y_discrete(labels = scales::label_wrap(17)) +
  theme_wfp(
    grid = FALSE,
    axis = "y",
    axis_title = FALSE,
    axis_text = "y"
  )


```

# Boxplots

------------------------------------------------------------------------

## Basic Boxplot

```{r ggplot_boxplot_single, message = FALSE, warning = FALSE}

##########################################################
## Generates boxplot with single fill color
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members) %>% 
  rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members) -> x


ggplot(x, aes(x = residency_status, y = hh_size)) +
  geom_boxplot(fill = wfp_pal(n = 1, "pal_blue"),
               alpha = 0.3,
               color = wfp_pal(n = 1, "pal_navy"),
               width = 0.6) +
  labs(
    title = "Household Size Distributions by Residency Status | 2022",
    subtitle = "Median, Interquartile Range, Minimum, and Maximum Number of Individuals per Household",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) +
  scale_y_continuous(expand = expansion(c(0, 0.1)),
                     breaks = seq(0, 100, 10)) +
  theme_wfp(grid = "Y", axis_title = FALSE)

```

## Faceted Boxplot

```{r ggplot_boxplot_multiple, message = FALSE, warning = FALSE}

##########################################################
## Generates boxplot with multiple fill colors
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members, interview.section_b.B03) %>% 
  rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members, respondent_sex = interview.section_b.B03) -> x


ggplot(x, aes(x = residency_status, y = hh_size, fill = respondent_sex)) +
  geom_boxplot(alpha = 0.3,
               color = wfp_pal(n = 1, "pal_navy"),
               width = 0.6) +
  labs(
    title = "Household Size Distributions by Residency Status and Respondent Sex | 2022",
    subtitle = "Median, Interquartile Range, Minimum, and Maximum Number of Individuals per Household",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) +
  scale_fill_wfp_b(nmax = 3, order = c(2, 1)) +
  scale_y_continuous(expand = expansion(c(0, 0.1)),
                     breaks = seq(0, 100, 10)) +
  theme_wfp(grid = "Y", axis_title = FALSE)


```

# Scatterplots

------------------------------------------------------------------------

## Basic Scatterplot

```{r ggplot_scatterplot_single, message = FALSE, warning = FALSE}

##########################################################
## Generates scatterplot with single fill colors
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members, FCS) %>% 
  rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members, fcs = FCS) -> x


ggplot(
  x,
  aes(
    x = hh_size,
    y = fcs,
  )
) +
  geom_point(
    color = wfp_pal(n = 1, "pal_blue"),
    size = 1.0, position = "jitter", alpha = 0.50
  ) +
  labs(
    title = "Household Size Against Household Food Consumption Score | 2022",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme",
    y = "Food Consumption Score",
    x = "Household Size"
  ) +
  scale_x_continuous(labels = label_number_si()) +
  scale_y_continuous(
    labels = label_number_si(),
    breaks = pretty_breaks(n = 6)
  ) +
  theme_wfp(
    grid = "XY",
    axis = FALSE,
    axis_title = "xy"
  )



```

## Faceted Scatterplot

```{r ggplot_scatterplot_multiple, message = FALSE, warning = FALSE}

##########################################################
## Generates scatterplot with single fill colors
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members, FCS, interview.section_b.B03) %>% 
  rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members, fcs = FCS, respondent_sex = interview.section_b.B03) -> x


ggplot(
  x,
  aes(
    x = hh_size,
    y = fcs
  )
) +
  geom_point(aes(color = respondent_sex),
    size = 1.0, position = "jitter", alpha = 0.50
  ) +
  labs(
    title = "Household Size Against Household Food Consumption Score | 2022",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme",
    y = "Food Consumption Score",
    x = "Household Size"
  ) +
  scale_x_continuous(labels = label_number_si()) +
  scale_y_continuous(
    labels = label_number_si(),
    breaks = pretty_breaks(n = 6)
  ) +
  scale_colour_wfp_b(palette = "pal_blue") +
  theme_wfp(
    grid = "XY",
    axis = FALSE,
    axis_title = "xy"
  )



```

# Histograms

------------------------------------------------------------------------

## Basic Histogram - Discrete

```{r ggplot_histogram_single, message = FALSE, warning = FALSE}

##########################################################
## Generates histogram with single fill colors
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members, FCS, interview.section_b.B03) %>% 
  rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members, fcs = FCS, respondent_sex = interview.section_b.B03) -> x

  ggplot(x, aes(x=fcs)) +
    geom_histogram(binwidth=5, fill = wfp_pal(n = 1, "pal_wfp_main"), color= wfp_pal(n = 1, "pal_navy"), alpha=0.75) +
    labs(
    title = "Distribution of Household Food Consumption Scores | 2022",
    subtitle = "Number of Households per FCS Score (bin = 5)",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) +
    theme_wfp(grid = "XY",
    axis = FALSE,
    axis_title = FALSE)


```

# Density Plots

------------------------------------------------------------------------

## Basic Density Plot

```{r ggplot_histogram_single_continuous, message = FALSE, warning = FALSE}

##########################################################
## Generates histogram with single fill colors
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members, FCS, interview.section_b.B03) %>% 
  rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members, fcs = FCS, respondent_sex = interview.section_b.B03) -> x

  ggplot(x, aes(x=fcs)) +
    geom_density(fill = wfp_pal(n = 1, "pal_wfp_main"), color= wfp_pal(n = 1, "pal_navy"), alpha=0.75) +
    labs(
    title = "Distribution of Household Food Consumption Scores | 2022",
    subtitle = "Relative Proportion of Households per FCS Score",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) +
    theme_wfp(grid = "XY",
    axis = FALSE,
    axis_title = FALSE)


```

## Faceted Density Plot - Overlayed

```{r ggplot_histogram_multiple_continuous, message = FALSE, warning = FALSE}

##########################################################
## Generates histogram with multiple fill colors
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members, FCS, interview.section_b.B03) %>% 
  rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members, fcs = FCS, respondent_sex = interview.section_b.B03) -> x

  ggplot(x, aes(x=fcs, group = residency_status, fill = residency_status)) +
    geom_density(alpha=0.40) +
  scale_fill_wfp_b(palette = "pal_blue_red") +
    labs(
    title = "Distribution of Household Food Consumption Scores by Residency Status | 2022",
    subtitle = "Relative Proportion of Households per FCS Score by Residency Status",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) +
    theme_wfp(grid = "XY",
    axis = FALSE,
    axis_title = FALSE)

  

```

## Faceted Density Plot - Separate Graphs

```{r ggplot_histogram_multiple_continuous_seperate, message = FALSE, warning = FALSE}

##########################################################
## Generates histogram with multiple fill colors
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members, FCS, interview.section_b.B03) %>% 
  rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members, fcs = FCS, respondent_sex = interview.section_b.B03) -> x

  ggplot(x, aes(x=fcs, group = residency_status, fill = residency_status)) +
    geom_density(alpha=0.40) +
    facet_wrap(~residency_status)+
  scale_fill_wfp_b(palette = "pal_blue_red") +
    labs(
    title = "Distribution of Household Food Consumption Scores for each Residency Status | 2022",
    subtitle = "Relative Proportion of Households per FCS Score for each Residency Status",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) +
    theme_wfp(grid = "XY",
    axis = FALSE,
    axis_title = FALSE)

  

```

# Food Security

------------------------------------------------------------------------

## FCS

```{r ggplot_stacked_barchart_fcs, message = FALSE, warning = FALSE}

fsnms_data %>% select(`interview.section_c.C01`, FCS_Classification) %>% 
  rename(residency_status = `interview.section_c.C01`, fcs_classification = FCS_Classification) %>% group_by(residency_status, fcs_classification) %>% summarise(n = n()) %>% drop_na(fcs_classification) %>% mutate(freq = 100*(n / sum(n))) -> x


ggplot(x) +
  geom_col(aes(x = residency_status,
               y = freq,
               fill = fcs_classification), width = 0.7) + geom_text(aes(x = residency_status,
                y = freq,
                color = fcs_classification,
                label = paste0(round(freq,1), "%")),
            position = position_stack(vjust = 0.5),
            show.legend = FALSE,
            size = 10/.pt,
) + scale_color_manual(values = c(main_white, main_black, main_white)) +
    labs(
    title = "Household Food Consumption Score Classification by Residency Status | 2022",
    subtitle = "Relative Proportion of Households per FCS Classification by Residency Status",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) +  scale_fill_wfp_b(palette = "pal_stoplight_3pt") + theme_wfp(grid = "XY",
    axis = FALSE,
    axis_title = FALSE)



```

## CARI

```{r ggplot_stacked_barchart_cari, message = FALSE, warning = FALSE}


fsnms_data %>% select(`interview.section_c.C01`, CARI_Classification) %>% 
  rename(residency_status = `interview.section_c.C01`, cari_classification = CARI_Classification) %>% group_by(residency_status, cari_classification) %>% summarise(n = n()) %>% drop_na(cari_classification) %>% mutate(freq = 100*(n / sum(n))) -> x


ggplot(x) +
  geom_col(aes(x = residency_status,
               y = freq,
               fill = cari_classification), width = 0.7) + geom_text(aes(x = residency_status,
                y = freq,
                color = cari_classification,
                label = paste0(round(freq,1), "%")),
            position = position_stack(vjust = 0.5),
            show.legend = FALSE,
            size = 10/.pt,
) + scale_color_manual(values = c(main_white, main_black, main_white, main_white)) +
    labs(
    title = "Household CARI Classification by Residency Status | 2022",
    subtitle = "Relative Proportion of Households per CARI Classification by Residency Status",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) +  scale_fill_wfp_b(palette = "pal_stoplight_4pt") + theme_wfp(grid = "XY",
    axis = FALSE,
    axis_title = FALSE)




```

# Nutrition

------------------------------------------------------------------------

## Infant Feeding Area Graph

```{r ggplot_stacked_barchart_acute, message = FALSE, warning = FALSE}


```
