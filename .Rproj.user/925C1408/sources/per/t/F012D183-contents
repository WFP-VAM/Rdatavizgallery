---
title: "WFP Color Palette and Theme Develompent"
author: "William McFall - WFP South Sudan RAM Officer"
date: "`r format(Sys.time(), '%B %d, %Y')`"
output: 
  html_document:
    theme: flatly
    toc: false
    
---

```{r wfp_theme, echo=FALSE, message = FALSE, warning = FALSE}

rm(list = ls())

##########################################################
## Established local working directory
##########################################################

setwd('C:/Users/william.mcfall/OneDrive - World Food Programme/2. SSCO Files/5. Programme Files/14. FSNMS - Round 28/Data Analysis')

##########################################################
## Loads relevant packages
##########################################################

library(gtsummary)
library(readxl)
library(openxlsx)
library(dplyr)
library(tidyr)
library(mosaic)
library(tidyverse)
library(modelsummary)
library(kableExtra) 
library(foreign)
library(arsenal)
library(desctable)
library(survey)
library(srvyr) 
library(naniar)
library(rmarkdown)
library(haven)
library(labelled)
library(sjlabelled)
# library(xlsx)
library(rlang)
library(skimr)
library(ggrepel)
library(janitor)
library(skimr)
library(gt)
library(ggmap)
library(colorspace)
library(scales)
library(extrafont)

##########################################################
## Loads required font family
##########################################################

# font_import(paths = "C:/Users/william.mcfall/OneDrive - World Food Programme/Documents/R/R-4.1.2/library/rmarkdown/rmd/h/bootstrap/css/fonts")
loadfonts(device="win")

##########################################################
## Loads dataset
##########################################################

file_path <- "./Data Input/cleaned_raw_data.xlsx"
fsnms_data <- read_xlsx(file_path, sheet="data")


##########################################################
## Prepare dataset
##########################################################

fsnms_data %>% mutate(FCSStap = as.numeric(interview.section_i.f01_note.F01A),
                      FCSPulse = as.numeric(interview.section_i.f02_note.F02A),
                      FCSDairy = as.numeric(interview.section_i.f03_note.F03A),
                      FCSPr = as.numeric(interview.section_i.f04_note.F04A),
                      FCSVeg = as.numeric(interview.section_i.f05_note.F05A),
                      FCSFruit = as.numeric(interview.section_i.f06_note.F06A),
                      FCSFat = as.numeric(interview.section_i.f07_note.F07A),
                      FCSSugar = as.numeric(interview.section_i.f08_note.F08A),
                      FCSCond = as.numeric(interview.section_i.f09_note.F09A)) %>% 
                          mutate(FCSStap = ifelse(FCSStap >= 0 & FCSStap <= 7, FCSStap, NA),
                          FCSPulse = ifelse(FCSPulse >= 0 & FCSPulse <= 7, FCSPulse, NA),
                          FCSDairy = ifelse(FCSDairy >= 0 & FCSDairy <= 7, FCSDairy, NA),
                          FCSPr = ifelse(FCSPr >= 0 & FCSPr <= 7, FCSPr, NA),
                          FCSVeg = ifelse(FCSVeg >= 0 & FCSVeg <= 7, FCSVeg, NA),
                          FCSFruit = ifelse(FCSFruit >= 0 & FCSFruit <= 7, FCSFruit, NA),
                          FCSFat = ifelse(FCSFat >= 0 & FCSFat <= 7, FCSFat, NA),
                          FCSSugar = ifelse(FCSSugar >= 0 & FCSSugar <= 7, FCSSugar, NA),
                          FCSCond = ifelse(FCSCond >= 0 & FCSCond <= 7, FCSCond, NA)) -> fsnms_data

fsnms_data %>% mutate(FCS = FCSStap*2 + FCSPulse*3 + FCSDairy*4 + FCSPr*4 + FCSVeg*1 + FCSFruit*1 + FCSFat*0.5 + FCSSugar*0.5) -> fsnms_data


##########################################################
## Creates discrete color palettes for vizualization of categorical values
##########################################################

main_blue <- "#007DBC"
main_navy <- "#1A4262"
main_green <- "#00B485"
main_red <- "#982B56"
main_grey <- "#666666"
main_orange <- "#F47847"

## creates blue color palette object
pal_blue_wfp <- c(
  "blue1" = colorspace::lighten(main_blue, 0.85),
  "blue2" = colorspace::lighten(main_blue, 0.55),
  "blue3" = colorspace::lighten(main_blue, 0.3),
  "blue4" = main_blue,
  "blue5" = colorspace::darken(main_blue, 0.3)
)

## creates navy color palette object
pal_navy_wfp <- c(
  "navy1" = colorspace::lighten(main_navy, 0.9),
  "navy2" = colorspace::lighten(main_navy, 0.75),
  "navy3" = colorspace::lighten(main_navy, 0.5),
  "navy4" = colorspace::lighten(main_navy, 0.25),
  "navy5" = main_navy
)

## creates green color palette object
pal_green_wfp <- c(
  "green1" = colorspace::lighten(main_green, 0.9),
  "green2" = colorspace::lighten(main_green, 0.55),
  "green3" = colorspace::lighten(main_green, 0.3),
  "green4" = main_green,
  "green5" = colorspace::darken(main_green, 0.3)
)

## creates red color palette object
pal_red_wfp <- c(
  "red1" = colorspace::lighten(main_red, 0.85),
  "red2" = colorspace::lighten(main_red, 0.6),
  "red3" = colorspace::lighten(main_red, 0.3),
  "red4" = main_red,
  "red5" = colorspace::darken(main_red, 0.3)
)

## creates grey color palette object
pal_grey_wfp <- c(
  "grey1" = "#E6E6E6",
  "grey2" = "#CCCCCC",
  "grey3" = "#999999",
  "grey4" = main_grey,
  "grey5" = "#333333"
)

## creates orange color palette object
pal_orange_wfp <- c(
  "orange1" = colorspace::lighten(main_orange, 0.7),
  "orange2" = colorspace::lighten(main_orange, 0.5),
  "orange3" = colorspace::lighten(main_orange, 0.3),
  "orange4" = main_orange,
  "orange5" = colorspace::darken(main_orange, 0.3)
)

## creates color palette object aligned with WFP corporate guidance
pal_main <- c(main_blue,"#36B5C5", main_navy, main_orange, main_green, main_red, "#B79F8D","#008868", "#EF404C", "#ECDFBB", main_grey)

## creates object containing palette name, potential palette applications, and min/max number of categories palette can accommodate
wfpcolors <- tibble::tibble(name = c("pal_wfp_main",
                                       "pal_wfp_alt",
                                       "pal_blue",
                                       "pal_navy",
                                       "pal_green",
                                       "pal_red",
                                       "pal_orange",
                                       "pal_grey",
                                       "pal_blue_red",
                                       "pal_navy_red"),
                              type = c(rep("qualitative", 2),
                                       rep("sequential", 6),
                                       rep("diverging", 2)),
                              min_n = 1,
                              max_n = c(c(10, 7),
                                        rep(5, 6),
                                        rep(9, 2)),
                              n1 = list(pal_main[1],
                                        pal_blue_wfp[4],
                                        pal_blue_wfp[4],
                                        pal_navy_wfp[5],
                                        pal_green_wfp[4],
                                        pal_red_wfp[4],
                                        pal_orange_wfp[3],
                                        pal_grey_wfp[4],
                                        NULL, NULL),
                              n2 = list(pal_main[1:2],
                                        pal_blue_wfp[4:3],
                                        c(pal_blue_wfp[2], pal_blue_wfp[4]),
                                        c(pal_navy_wfp[3], pal_navy_wfp[5]),
                                        c(pal_green_wfp[2], pal_green_wfp[4]),
                                        c(pal_red_wfp[2], pal_red_wfp[4]),
                                        c(pal_orange_wfp[3], pal_orange_wfp[4]),
                                        c(pal_grey_wfp[2], pal_grey_wfp[4]),
                                        c(pal_blue_wfp[4], pal_red_wfp[4]),
                                        c(pal_navy_wfp[5], pal_red_wfp[4])),
                              n3 = list(c(pal_main[3], pal_main[1:2]),
                                        pal_blue_wfp[4:2],
                                        pal_blue_wfp[2:4],
                                        pal_navy_wfp[3:5],
                                        pal_green_wfp[2:4],
                                        pal_red_wfp[2:4],
                                        pal_orange_wfp[3:5],
                                        pal_grey_wfp[2:4],
                                        c(pal_blue_wfp[4], pal_grey_wfp[1], pal_red_wfp[4]),
                                        c(pal_navy_wfp[5], pal_grey_wfp[1], pal_red_wfp[4])),
                              n4 = list(c(pal_main[3], pal_main[1:2], pal_main[5]),
                                        c(pal_blue_wfp[4:2], pal_navy_wfp[5]),
                                        pal_blue_wfp[2:5],
                                        pal_navy_wfp[2:5],
                                        pal_green_wfp[2:5],
                                        pal_red_wfp[2:5],
                                        pal_orange_wfp[2:5],
                                        pal_grey_wfp[2:5],
                                        c(pal_blue_wfp[4], pal_blue_wfp[2],
                                          pal_red_wfp[2], pal_red_wfp[4]),
                                        c(pal_navy_wfp[5], pal_navy_wfp[3],
                                          pal_red_wfp[2], pal_red_wfp[4])),
                              n5 = list(c(pal_main[3], pal_main[1:2], pal_main[5], pal_main[7]),
                                        c(pal_blue_wfp[4:2], pal_navy_wfp[5], pal_green_wfp[4]),
                                        pal_blue_wfp[1:5],
                                        pal_navy_wfp[1:5],
                                        pal_green_wfp[1:5],
                                        pal_red_wfp[1:5],
                                        pal_orange_wfp[1:5],
                                        pal_grey_wfp[1:5],
                                        c(pal_blue_wfp[4], pal_blue_wfp[2],
                                          pal_grey_wfp[1],
                                          pal_red_wfp[2], pal_red_wfp[4]),
                                        c(pal_navy_wfp[5], pal_navy_wfp[3],
                                          pal_grey_wfp[1],
                                          pal_red_wfp[2], pal_red_wfp[4])),
                              n6 = list(c(pal_main[1:5], pal_main[7]),
                                        c(pal_blue_wfp[4:2], pal_navy_wfp[5], pal_green_wfp[4],
                                          pal_orange_wfp[4]),
                                        NULL, NULL, NULL,
                                        NULL, NULL, NULL,
                                        c(pal_blue_wfp[4:2],  pal_red_wfp[2:4]),
                                        c(pal_navy_wfp[5:3], pal_red_wfp[2:4])),
                              n7 = list(pal_main[1:7],
                                        c(pal_blue_wfp[4:2], pal_navy_wfp[5], pal_green_wfp[4],
                                          pal_orange_wfp[4], pal_red_wfp[4]),
                                        NULL, NULL, NULL,
                                        NULL, NULL, NULL,
                                        c(pal_blue_wfp[4:2],  pal_grey_wfp[1], pal_red_wfp[2:4]),
                                        c(pal_navy_wfp[5:3], pal_grey_wfp[1], pal_red_wfp[2:4])),
                              n8 = list(pal_main[1:8],
                                        NULL,
                                        NULL, NULL, NULL,
                                        NULL, NULL, NULL,
                                        c(pal_blue_wfp[5:2], pal_red_wfp[2:5]),
                                        c(pal_navy_wfp[5:2], pal_red_wfp[2:5])),
                              n9 = list(pal_main[1:9],
                                        NULL,
                                        NULL, NULL, NULL,
                                        NULL, NULL, NULL,
                                        c(pal_blue_wfp[5:2], pal_grey_wfp[1], pal_red_wfp[2:5]),
                                        c(pal_navy_wfp[5:2], pal_grey_wfp[1], pal_red_wfp[2:5])),
                              n10 = list(pal_main,
                                         NULL,
                                         NULL, NULL, NULL,
                                         NULL, NULL, NULL,
                                         NULL, NULL))


wfpcolors <- as.data.frame(wfpcolors)


##########################################################
## Creates continuous color palettes for vizualization of continuous values
##########################################################

scale_colour_wfp_a <- function(..., type = "sequential",
                                palette = 1,
                                direction = 1,
                                na.value = "#E9E9E9", guide = "colourbar") {

  pal <- wfp_pal_scale(type = type,
                         palette = palette,
                         direction = direction)(256)

  continuous_scale("colour",
                   "wfp_continuous",
                   gradient_n_pal(pal),
                   na.value = na.value,
                   guide = guide,
                   ...)
}


scale_colour_wfp_b <- function(..., type = "qualitative",
                                palette = 1,
                                direction = 1,
                                nmax = NULL,
                                order = NULL,
                                na.value = "#E9E9E9") {

  pal <- wfp_pal_scale(type = type,
                         palette = palette,
                         nmax = nmax,
                         order = order,
                         direction = direction)

  discrete_scale("colour",
                 "wfp_discrete",
                 pal,
                 na.value = na.value,
                 ...)
}



##########################################################
## Creates continuous color palettes for vizualization of continuous values
##########################################################

scale_fill_wfp_a <- function(..., type = "sequential",
                               palette = 1,
                               direction = 1,
                               na.value = "#E9E9E9",
                               guide = "colourbar") {

  pal <- wfp_pal_scale(type = type,
                         palette = palette,
                         direction = direction)(256)

  continuous_scale("fill",
                   "wfp_continuous",
                   gradient_n_pal(pal),
                   na.value = na.value,
                   guide = guide,
                   ...)
}


scale_fill_wfp_b <- function(..., type = "qualitative",
                               palette = 1,
                               direction = 1,
                               nmax = NULL,
                               order = NULL,
                               na.value	= "#E9E9E9") {

  pal <- wfp_pal_scale(type = type,
                         palette = palette,
                         nmax = nmax,
                         order = order,
                         direction = direction)

  discrete_scale("fill",
                 "wfp_discrete",
                 pal,
                 na.value = na.value,
                 ...)
}



##########################################################
## Creates a series of functions to validate the palette name and ensure the the palette aligns with data type and number of categories
##########################################################

wfp_pal_scale <- function(type = "qualitative",
                            nmax = NULL, order = NULL,
                            palette = 1, direction = 1) {
  pal <- wfp_pal_name(palette, type)

  function(n) {
    if (is.null(nmax) | type != "qualitative")
      nmax <- n
    if (is.null(order) | type != "qualitative")
      order <- 1:n

    if (n > nmax) {
      warning("Insufficient values in scale_{color|fill}_wfp_d. ", n, " needed but only ",
              nmax, " provided.", call. = FALSE)
    }

    # If less than 3 colors are requested, brewer.pal will return a 3-color palette and
    # give a warning. This warning isn't useful, so suppress it.
    # If the palette has k colors and >k colors are requested, brewer.pal will
    # return a k-color palette and give a warning. This warning is useful, so
    # don't suppress it.

    if (nmax < 3) {
      pal <- suppressWarnings(wfp_pal(nmax, pal))
    } else {
      pal <- wfp_pal(nmax, pal)
    }

    # In both cases ensure we have n items
    pal <- pal[order]

    if (direction == -1)
      pal = rev(pal)

    unname(pal)
  }
}


##########################################################
## Creates function to validate whether palette name is valid otherwise replaces with pal_blue
##########################################################

wfp_pal_name <- function(palette, type) {
  if (is.character(palette)) {
    if (!palette %in% wfpcolors$name) {
      warning("Unknown palette ", palette)
      palette = "pal_blue"
    }
    return(palette)
  }
  type <- match.arg(type, unique(wfpcolors$type))
  wfpcolors$name[wfpcolors$type == type][palette]
}


##########################################################
## Creates function to validate whether palette has enough categories to allow for vizualization
##########################################################

wfp_pal <- function(n = NULL, name, ...){
  if (!(name %in% wfpcolors$name)){
    stop(paste(name, "is not a valid palette name\n"),
         call. = FALSE)
  }
  selected_metadata <- wfpcolors[wfpcolors$name == name, ]
  min_n <- selected_metadata$min_n
  max_n <- selected_metadata$max_n
  type <- selected_metadata$type
  if (is.null(n)) {
    n <- max_n
  }
  proper_n <- n
  if (proper_n > max_n) {
    proper_n <- max_n
  }
  if (!(n %in% min_n:max_n) && type == "qualitative") {
    warning(paste("Number of colors (n) in the", name,
                  "palette should be between", min_n, "and", max_n,
                  "\n"), call. = FALSE)
  }
  if (n < min_n) {
    warning(paste("Number of colors (n) in the", name,
                  "palette should be between", min_n, "and",
                  max_n, "\n"), call. = FALSE)
    proper_n <- min_n
    n <- min_n
  }
  coln <- paste0("n", proper_n)
  colors <- wfpcolors[wfpcolors$name == name, ][[coln]][[1]]
  if (n > 2) {
    colors <- grDevices::colorRampPalette(colors, ...)(n = n)
  }
  colors
}


##########################################################
## Creates a function that displays the color palettes
##########################################################

display_wfp_all <- function(n = NULL, type = "all") {
  wfpcolors <- wfpcolors[nrow(wfpcolors):1, ]
  if (any(type == "all")) {
    selected_type <- wfpcolors
  } else if (any(type %in% c("qualitative", "sequential", "diverging"))) {
    selected_type <- wfpcolors[wfpcolors$type %in% type, ]
  } else {
    stop(paste(type, "is not a valid name for a color type\n"))
  }
  selected_metadata <- wfpcolors[wfpcolors$name %in% selected_type$name, ]

  n_colors <- nrow(selected_metadata)

  if (is.null(n)) {
    my_n <- selected_metadata$max_n
  } else{
    my_n <- rep(n, n_colors)
  }

  selected_colors <- vector("list", n_colors)

  ylim <- c(0, n_colors)
  oldpar <- par(mgp = c(2, 0.25, 0))
  on.exit(par(oldpar))
  max_my_n <- max(my_n)
  plot(1, 1, xlim = c(-1.5, max_my_n), ylim = ylim,
       type = "n", axes = FALSE, bty = "n", xlab = "", ylab = "")

  for(i in seq_len(n_colors)) {
    one_color <- wfp_pal(n = my_n[i],
                           name = selected_metadata$name[i])
    rect(xleft = 0:(my_n[i] - 1),
         ybottom = i - 1,
         xright = 1:my_n[i],
         ytop = i - 0.2,
         col = one_color,
         border = "light grey")
    text(-0.1, i - 0.6,
         labels = selected_metadata$name[i],
         xpd = TRUE,
         adj = 1)
  }
}


##########################################################
## Creates a function that stores a WFP ggplot theme
##########################################################

## resource outlining primary ggplot theme elements 
## https://ggplot2.tidyverse.org/reference/theme.html 
## https://ggplot2.tidyverse.org/reference/element.html

theme_wfp <- function(font_size = 10, font_family = "Open Sans", line_size = .5,
                            rel_small = 8 / 9, rel_tiny = 7 / 9, rel_large = 12 / 9,
                        grid = TRUE, axis = "x", axis_text = TRUE, axis_title = TRUE,
                        axis_ticks = FALSE, legend = TRUE, legend_title = FALSE) {

  ## establishment of margin formatting
  half_line <- font_size / 2

  ## establishment of colour pallete for font and line formatting
  wfp_blue <- "#007DBC"
  dark_grey <- "#191919"
  medium_grey <- "#666666"
  light_grey <- "#CCCCCC"
  
  ## establishment of default theme formatting 
  ret <- ggplot2::theme_minimal(base_family = font_family, base_size = font_size)

  ## modification of default theme formatting
  ret <- ret + ggplot2::theme(line = ggplot2::element_line(
    color = "black", size = line_size, linetype = 1, lineend = "butt"
  ))
  ret <- ret + ggplot2::theme(rect = ggplot2::element_rect(
    fill = NA, color = NA, size = line_size, linetype = 1
  ))
  ret <- ret + ggplot2::theme(text = ggplot2::element_text(
    family = font_family, face = "plain", color = dark_grey,
    size = font_size, hjust = 0.5, vjust = 0.5, angle = 0, lineheight = .9,
    margin = ggplot2::margin(), debug = FALSE
  ))

  ## establishment of legend formatting
  if (!legend) {
    ret <- ret + theme(legend.position = "none")
  } else {
    ret <- ret + ggplot2::theme(legend.background = ggplot2::element_blank())
    ret <- ret + ggplot2::theme(legend.spacing = grid::unit(font_size, "pt"))
    ret <- ret + ggplot2::theme(legend.margin = ggplot2::margin(0, 0, 0, 0))
    ret <- ret + ggplot2::theme(legend.key = ggplot2::element_blank())
    ret <- ret + ggplot2::theme(legend.key.size = grid::unit(1.2 * font_size, "pt"))
    ret <- ret + ggplot2::theme(legend.text = ggplot2::element_text(color = dark_grey, size = rel(rel_small)))
    ret <- ret + ggplot2::theme(legend.position = "top")
    ret <- ret + ggplot2::theme(legend.direction = "horizontal")
    ret <- ret + ggplot2::theme(legend.justification = 0)
    ret <- ret + ggplot2::theme(legend.box.margin = ggplot2::margin(0, 0, 0, 0))
    ret <- ret + ggplot2::theme(legend.box.background = ggplot2::element_blank())
    ret <- ret + ggplot2::theme(legend.box.spacing = grid::unit(font_size, "pt"))
    if (!legend_title) {
      ret <- ret + theme(legend.title = element_blank())
    } else {
      ret <- ret + ggplot2::theme(legend.title = ggplot2::element_text(size = rel(rel_small),
                                                                       color = dark_grey,
                                                                       hjust = 0))
    }
  }

  ## establishment of grid formatting for panel (i.e. space behind faceted plots)
  if (inherits(grid, "character") | grid == TRUE) {
    ret <- ret + ggplot2::theme(panel.grid = ggplot2::element_line(color = light_grey, size = line_size / 2))
    ret <- ret + ggplot2::theme(panel.grid.major = ggplot2::element_line(color = light_grey, size = line_size / 2))
    ret <- ret + ggplot2::theme(panel.grid.minor = ggplot2::element_line(color = light_grey, size = line_size / 2))

    if (inherits(grid, "character")) {
      if (regexpr("X", grid)[1] < 0) ret <- ret + ggplot2::theme(panel.grid.major.x = ggplot2::element_blank())
      if (regexpr("Y", grid)[1] < 0) ret <- ret + ggplot2::theme(panel.grid.major.y = ggplot2::element_blank())
      if (regexpr("x", grid)[1] < 0) ret <- ret + ggplot2::theme(panel.grid.minor.x = ggplot2::element_blank())
      if (regexpr("y", grid)[1] < 0) ret <- ret + ggplot2::theme(panel.grid.minor.y = ggplot2::element_blank())
    }
  } else {
    ret <- ret + ggplot2::theme(panel.grid = ggplot2::element_blank())
  }

  ## establishment of formatting for panel (i.e. space behind faceted plots)
  ret <- ret + ggplot2::theme(panel.background = ggplot2::element_blank())
  ret <- ret + ggplot2::theme(panel.border = ggplot2::element_blank())
  ret <- ret + ggplot2::theme(panel.spacing = grid::unit(half_line, "pt"))
  ret <- ret + ggplot2::theme(panel.ontop = FALSE)

  ## establishment of formatting for axis
  if (inherits(axis, "character") | axis == TRUE) {
    ret <- ret + ggplot2::theme(axis.line = ggplot2::element_line(
      color = dark_grey, size = line_size,
      lineend = "square"
    ))
    if (inherits(axis, "character")) {
      axis <- tolower(axis)
      if (regexpr("x", axis)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.line.x = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.line.x = ggplot2::element_line(
          color = dark_grey, size = line_size,
          lineend = "square"
        ))
      }
      if (regexpr("y", axis)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.line.y = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.line.y = ggplot2::element_line(
          color = dark_grey, size = line_size,
          lineend = "square"
        ))
      }
    } else {
      ret <- ret + ggplot2::theme(axis.line.x = ggplot2::element_line(
        color = dark_grey, size = line_size,
        lineend = "square"
      ))
      ret <- ret + ggplot2::theme(axis.line.y = ggplot2::element_line(
        color = dark_grey, size = line_size,
        lineend = "square"
      ))
    }
  } else {
    ret <- ret + ggplot2::theme(axis.line = ggplot2::element_blank())
  }

  ## establishment of formatting for axis text
  if (inherits(axis_text, "character") | axis_text == TRUE) {
    ret <- ret + ggplot2::theme(axis.text = ggplot2::element_text(size = rel(rel_small), color = dark_grey))
    if (inherits(axis_text, "character")) {
      axis_text <- tolower(axis_text)
      if (regexpr("x", axis_text)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.text.x = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.text.x = ggplot2::element_text(margin = ggplot2::margin(
          t = rel_small * font_size / 4
        ), vjust = 1))
        ret <- ret + ggplot2::theme(axis.text.x.top = ggplot2::element_text(margin = ggplot2::margin(
          b = rel_small * font_size / 4
        ), vjust = 0))
      }
      if (regexpr("y", axis_text)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.text.y = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.text.y = ggplot2::element_text(margin = ggplot2::margin(
          r = rel_small * font_size / 4
        ), hjust = 1))
        ret <- ret + ggplot2::theme(axis.text.y.right = ggplot2::element_text(margin = ggplot2::margin(
          l = rel_small * font_size / 4
        ), hjust = 0))
      }
    } else {
      ret <- ret + ggplot2::theme(axis.text.x = ggplot2::element_text(margin = ggplot2::margin(
        t = rel_small * font_size / 4
      ), vjust = 1))
      ret <- ret + ggplot2::theme(axis.text.x.top = ggplot2::element_text(margin = ggplot2::margin(
        b = rel_small * font_size / 4
      ), vjust = 0))
      ret <- ret + ggplot2::theme(axis.text.y = ggplot2::element_text(margin = ggplot2::margin(
        r = rel_small * font_size / 4
      ), hjust = 1))
      ret <- ret + ggplot2::theme(axis.text.y.right = ggplot2::element_text(margin = ggplot2::margin(
        l = rel_small * font_size / 4
      ), hjust = 0))
    }
  } else {
    ret <- ret + ggplot2::theme(axis.text = ggplot2::element_blank())
  }

  ## establishment of formatting for axis title
  if (inherits(axis_title, "character") | axis_title == TRUE) {
    ret <- ret + ggplot2::theme(axis.title = ggplot2::element_text(size = rel(rel_small), color = medium_grey))
    if (inherits(axis_title, "character")) {
      axis_title <- tolower(axis_title)
      if (regexpr("x", axis_title)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.title.x = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.title.x = ggplot2::element_text(margin = ggplot2::margin(
          t = rel_small * font_size / 4
      ), vjust = 1))
        ret <- ret + ggplot2::theme(axis.title.x.top = ggplot2::element_text(margin = ggplot2::margin(
          b = rel_small * font_size / 4
        ), vjust = 0))
      }
      if (regexpr("y", axis_title)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.title.y = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.title.y = ggplot2::element_text(angle = 90, margin = ggplot2::margin(
          r = rel_small * font_size / 4
        ), vjust = 1))
        ret <- ret + ggplot2::theme(axis.title.y.right = ggplot2::element_text(angle = -90, margin = ggplot2::margin(
          l = rel_small * font_size / 4
        ), vjust = 0))
      }
    } else {
      ret <- ret + ggplot2::theme(axis.title.x = ggplot2::element_text(margin = ggplot2::margin(
        t = rel_small * font_size / 4
      ), vjust = 1))
      ret <- ret + ggplot2::theme(axis.title.x.top = ggplot2::element_text(margin = ggplot2::margin(
        b = rel_small * font_size / 4
      ), vjust = 0))
      ret <- ret + ggplot2::theme(axis.title.y = ggplot2::element_text(angle = 90, margin = ggplot2::margin(
        r = rel_small * font_size / 4
      ), vjust = 1))
      ret <- ret + ggplot2::theme(axis.title.y.right = ggplot2::element_text(angle = -90, margin = ggplot2::margin(
        l = rel_small * font_size / 4
      ), vjust = 0))
    }
  } else {
    ret <- ret + ggplot2::theme(axis.title = ggplot2::element_blank())
  }

  ## establishment of formatting for axis ticks
  if (inherits(axis_ticks, "character") | axis_ticks == TRUE) {
    ret <- ret + ggplot2::theme(axis.ticks.length = grid::unit(half_line / 2, "pt"))
    ret <- ret + ggplot2::theme(axis.ticks = ggplot2::element_line(color = dark_grey, size = line_size / 2))
    if (inherits(axis_ticks, "character")) {
      axis_ticks <- tolower(axis_ticks)
      if (regexpr("x", axis_ticks)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.ticks.x = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.ticks.x = ggplot2::element_line(color = dark_grey, size = line_size / 2))
      }
      if (regexpr("y", axis_ticks)[1] < 0) {
        ret <- ret + ggplot2::theme(axis.ticks.y = ggplot2::element_blank())
      } else {
        ret <- ret + ggplot2::theme(axis.ticks.y = ggplot2::element_line(color = dark_grey, size = line_size / 2))
      }
    } else {
      ret <- ret + ggplot2::theme(axis.ticks.x = ggplot2::element_line(color = dark_grey, size = line_size / 2))
      ret <- ret + ggplot2::theme(axis.ticks.y = ggplot2::element_line(color = dark_grey, size = line_size / 2))
    }
  } else {
    ret <- ret + ggplot2::theme(axis.ticks = element_blank())
  }

  ## establishment of formatting for strip text(i.e. heading above faceted plots)
  ret <- ret + ggplot2::theme(strip.text = ggplot2::element_text(
    hjust = 0, size = font_size,
    margin = ggplot2::margin(half_line / 2, half_line / 2, half_line / 2, half_line / 2)
  ))

  ## establishment of formatting for title and subtitle
  ret <- ret + ggplot2::theme(plot.title = ggplot2::element_text(
    size = rel(rel_large), color = "black", face = "bold",
    hjust = 0, vjust = 1,
    margin = ggplot2::margin(b = font_size),
  ))
  ret <- ret + ggplot2::theme(plot.subtitle = ggplot2::element_text(
    size = font_size, color = dark_grey, face = "plain",
    hjust = 0, vjust = 1,
    margin = ggplot2::margin(t = -half_line, b = font_size * rel_large)
  ))
  ret <- ret + ggplot2::theme(plot.title.position = "plot")

  ## establishment of formatting for caption (i.e. footnote or source text)
  ret <- ret + ggplot2::theme(plot.caption = ggplot2::element_text(
    size = rel(rel_tiny), color = medium_grey,
    hjust = 0, vjust = 1,
    margin = ggplot2::margin(t = half_line)
  ))
  ret <- ret + ggplot2::theme(plot.caption.position = "plot")

  ## establishment of formatting for tags (i.e. figure label)
  ret <- ret + ggplot2::theme(plot.tag = ggplot2::element_text(
    size = font_size, color = wfp_blue,
    hjust = 0, vjust = 1
  ))
  ret <- ret + ggplot2::theme(plot.tag.position = c(0, 1))

  ## establishment of formatting for plot background
  ret <- ret + ggplot2::theme(plot.background = ggplot2::element_blank())
  ret <- ret + ggplot2::theme(plot.margin = ggplot2::margin(font_size, font_size, font_size, font_size))

  ## establishment of formatting for font sizing
  class(ret) <- c("conditional_wfp_theme", class(ret))
  attr(ret, "font_size") <- font_size
  ret
}


##########################################################
## Creates a function the updates the default gemo font family to Open Sans
##########################################################

update_geom_font_defaults <- function(family = "Open Sans", face = "plain", size = 3.5,
                                      color = "#191919") {
  ggplot2::update_geom_defaults("text", list(family = family, face = face, size = size, color = color))
  ggplot2::update_geom_defaults("label", list(family = family, face = face, size = size, color = color))
}

```

```{r display_palettes}

##########################################################
## Displays the available color palettes
##########################################################

display_wfp_all()

```

```{r ggplot_barchart_single, message = FALSE, warning = FALSE}

##########################################################
## Generates horizontal bar chart with single blue fill color
##########################################################

fsnms_data %>% group_by(`interview.section_c.C01`) %>% summarise(hh_size = mean(as.numeric(interview.b01_note.Cal_Total_family_members), na.rm = TRUE)) %>% rename(residency_status = `interview.section_c.C01`) -> x

ggplot(x) +
  geom_col(aes(
    x = hh_size,
    y = reorder(residency_status, hh_size),
  ),
  fill = wfp_pal(n = 1, "pal_blue"),
  width = 0.8
  ) +
  labs(
    title = "Average Household Size by Residency Status | 2022",
    subtitle = "Average Number of Individuals",
    x = "Household Size",
    y = "State",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) + geom_text(aes(x = hh_size,
    y = residency_status, label = round(hh_size, 2)),
  hjust = -0.5,
  size = 8 / .pt
  ) +
  scale_x_continuous(
    expand = expansion(c(0, 0.1)),
    breaks = pretty_breaks(n = 7),
    labels = label_number()
  ) + theme_wfp(grid = FALSE, axis = "y", axis_title = FALSE, axis_text = "y")


```

```{r ggplot_boxplot_single, message = FALSE, warning = FALSE}

##########################################################
## Generates boxplot with single fill color
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members) %>% rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members) -> x


ggplot(x, aes(x = residency_status, y = hh_size)) +
  geom_boxplot(fill = wfp_pal(n = 1, "pal_blue"),
               alpha = 0.3,
               color = wfp_pal(n = 1, "pal_navy"),
               width = 0.6) +
  labs(
    title = "Household Size Distributions by Residency Status | 2022",
    subtitle = "Median, Interquartile Range, Minimum, and Maximum Number of Individuals per Household",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) +
  scale_y_continuous(expand = expansion(c(0, 0.1)),
                     breaks = seq(0, 100, 10)) +
  theme_wfp(grid = "Y", axis_title = FALSE)

```


```{r ggplot_boxplot_multiple, message = FALSE, warning = FALSE}

##########################################################
## Generates boxplot with multiple fill colors
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members, interview.section_b.B03) %>% rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members, respondent_sex = interview.section_b.B03) -> x


ggplot(x, aes(x = residency_status, y = hh_size, fill = respondent_sex)) +
  geom_boxplot(alpha = 0.3,
               color = wfp_pal(n = 1, "pal_navy"),
               width = 0.6) +
  labs(
    title = "Household Size Distributions by Residency Status and Respondent Sex | 2022",
    subtitle = "Median, Interquartile Range, Minimum, and Maximum Number of Individuals per Household",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme"
  ) +
  scale_fill_wfp_b(nmax = 3, order = c(2, 1)) +
  scale_y_continuous(expand = expansion(c(0, 0.1)),
                     breaks = seq(0, 100, 10)) +
  theme_wfp(grid = "Y", axis_title = FALSE)


```

```{r ggplot_scatterplot_single, message = FALSE, warning = FALSE}

##########################################################
## Generates scatterplot with single fill colors
##########################################################

fsnms_data %>% select(`interview.section_c.C01`, interview.b01_note.Cal_Total_family_members, FCS) %>% rename(residency_status = `interview.section_c.C01`, hh_size = interview.b01_note.Cal_Total_family_members, fcs = FCS) -> x


ggplot(
  x,
  aes(
    x = hh_size,
    y = fcs,
  )
) +
  geom_point(
    color = wfp_pal(n = 1, "pal_grey"),
    size = 2.5, position = "jitter"
  ) +
  labs(
    title = "Household Size Against Household Food Consumption Score | 2022",
    caption = "Source: WFP VAM Unit \n© United Nations World Food Programme",
    y = "Food Consumption Score",
    x = "Household Size"
  ) +
  scale_x_continuous(labels = label_number_si()) +
  scale_y_continuous(
    labels = label_number_si(),
    breaks = pretty_breaks(n = 6)
  ) +
  theme_wfp(
    grid = "XY",
    axis = FALSE,
    axis_title = "xy"
  )



```
